<document>
<properties>
<title>Tag reference</title>
</properties>
<body>
<section name="Display *: Tag Library (EL)">
<p>
        The display tag library is an open source suite of custom tags that provide high level web presentation patterns
        which will work in a MVC model, and provide a significant amount of functionality while still being simple and
        straight-forward to use. The primary tag in the library is the Table tag.
     This is version 1.0 . </p>
<ul>
<li>
<a href="#caption">caption</a> 
            Simple tag which mimics the html caption tag . </li>
<li>
<a href="#column">column</a> 
            Displays a property of a row object inside a table . </li>
<li>
<a href="#footer">footer</a> 
            Tag wich should be nested into a table tag to provide a custom table footer . </li>
<li>
<a href="#setProperty">setProperty</a> 
            Sets the indicated property on the enclosing Table tag . </li>
<li>
<a href="#table">table</a> 
            Displays a list in an html table, formatting each item in the list according to the Column tags nested
            inside of this tag . </li>
</ul>
<p>
<em> Required attributes are marked with a <span style="color: red;">*</span> . </em>
</p>
</section>
<section name="table">
<p>
<a name="table"></a>
            Displays a list in an html table, formatting each item in the list according to the Column tags nested
            inside of this tag. Use the list attribute to indicate the Collection of data, in some scope, that the tag
            should operate on. Supports the export of the list data to alternative formats such as CSV, Excel, and XML.
            The contents of the list can be sorted, and the list can be broken into individual pages for display. If you
            use this tag in Struts, or in some other framework where the page is included via a jsp:include, you should
            use the requestURI attribute to indicate where tag generated links should point.
        </p>
<p> Can contain: JSP</p>
<subsection name="Example">
<source>
            
&amp;lt;display:table name="someList" export="true" id="row" requestURI="MyAction.do"&gt;
  &amp;lt;display:column sortable="true" title="ID"&gt; &amp;lt;c:out value="${row.id}"/&gt; &amp;lt;/display:column&gt;
  &amp;lt;display:column property="email" autolink="true"/&gt;
  &amp;lt;display:column property="description" title="Comments"/&gt;
&amp;lt;/display:table&gt;

        </source>
</subsection>
<subsection name="Attributes">
<table>
<tr>
<th>Name</th><th>Description</th><th>Type</th>
</tr>
<tr>
<td><a name="table_cellpadding"></a>cellpadding</td><td>
                html pass through attribute. Better using "padding" css attribute in style or class
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_cellspacing"></a>cellspacing</td><td>html pass through attribute</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_class"></a>class</td><td>html pass through attribute</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_decorator"></a>decorator</td><td>
                Fully qualified class name for a TableDecorator. Use a TableDecorator to provide custom operations
                against the whole list, such as computing totals. Must extend org.displaytag.decorator.TableDecorator.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_defaultorder"></a>defaultorder</td><td>
                The default order for the sorted column. Valid values are "ascending" (default) or "descending"
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_defaultsort"></a>defaultsort</td><td>
                The index of the column that will be used by default for sorting (starting from 1)
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_excludedParams"></a>excludedParams</td><td>
                Whitespace separated list containg the name of parameters which should NOT be forwarded during paging or
                sorting. You can use excludedParams="*" to match (exclude) any parameter.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_export"></a>export</td><td>enable/disable export. Valid values are true or false</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_frame"></a>frame</td><td>html pass through attribute.</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_htmlId"></a>htmlId</td><td>html "id" pass through attribute</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_id"></a>id</td><td>See "uid".</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_length"></a>length</td><td>number of records to be shown</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_name"></a>name</td><td>
                reference to the object used as source for the table. Can be an expression like
                requestScope.object.property. In the EL version of the taglibrary this must be an EL expression which
                points to the source object.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_offset"></a>offset</td><td>index of the first record to be shown</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_pagesize"></a>pagesize</td><td>number of records in a page</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_requestURI"></a>requestURI</td><td>
                When the present, links for sorting, exports, and paging are formed by adding any tag generated
                parameters to the value of requestURI attribute.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_requestURIAction"></a>requestURIAction</td><td>
				forma o link para next, first e prev
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_requestURIcontext"></a>requestURIcontext</td><td>
                Enable/disable prepending of application context to generated links. Default is true, you can set it to
                false in order to generate cross-context links.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_rules"></a>rules</td><td>html pass through attribute.</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_sort"></a>sort</td><td>
                Use 'page' if you want to sort only visible records, or 'list' if you want to sort the full list
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_style"></a>style</td><td>html pass through attribute</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_summary"></a>summary</td><td>html pass through attribute</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_tableName"></a>tableName</td><td>
                reference to the object used as source for the table. Can be an expression like
                requestScope.object.property. In the EL version of the taglibrary this must be an EL expression which
                points to the source object.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_uid"></a>uid</td><td>
                Unique id used to identify this table. The object representing the current row is also added to the
                pageContext under this name, so that you can refer to it in column bodies using ${uid}. You can also use
                uid_rowNum to refer to the current row number. Two tables in the same page can't have the same id
                (paging and sorting will affect both). If no "htmlId" is specified the same value will be used for the
                html id of the generated table.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_styleClass"></a><em class="deprecated">styleClass</em></td><td>@deprecated: use "class"</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_align"></a><em class="deprecated">align</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_background"></a><em class="deprecated">background</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_bgcolor"></a><em class="deprecated">bgcolor</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_height"></a><em class="deprecated">height</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_hspace"></a><em class="deprecated">hspace</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_vspace"></a><em class="deprecated">vspace</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_width"></a><em class="deprecated">width</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="table_border"></a><em class="deprecated">border</em></td><td>@deprecated html pass through attribute. Use css "border"</td><td><code>String</code></td>
</tr>
</table>
</subsection>
</section>
<section name="column">
<p>
<a name="column"></a>
            Displays a property of a row object inside a table. MUST be nested inside of a Table tag. The value
            displayed will be the results of a decorator (if any); else the property named by the 'property' attribute;
            or if the 'property' attribute is null, then the results of evaluating the JSP body of the tag.
        </p>
<p> Can contain: JSP</p>
<subsection name="Attributes">
<table>
<tr>
<th>Name</th><th>Description</th><th>Type</th>
</tr>
<tr>
<td><a name="column_autolink"></a>autolink</td><td>
                Automatically hyperlink URLs and email addresses that appear in the column. Defaults to 'false'.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_class"></a>class</td><td>
                html pass through attribute; use this instead of directly coding presentational atttributes.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_decorator"></a>decorator</td><td>
                The fully qualified class name of a class that should be used to "decorate" the underlying object being
                displayed. The class should implement org.displaytag.decorator.ColumnDecorator. If a decorator is
                specified for the entire table, then this decorator will decorate that decorator.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_group"></a>group</td><td>
                The grouping level (starting at 1 and incrementing) of this column (indicates if successive contain the
                same values, then they should not be displayed). The level indicates that if a lower level no longer
                matches, then the matching for this higher level should start over as well. If this attribute is not
                included, then no grouping is performed.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_headerClass"></a>headerClass</td><td>"class" html attribute added only for header cells.</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_href"></a>href</td><td>
                The base URL used to construct the dynamic link. If this attribute is provided, then the data that is
                shown for this column is wrapped inside a &lt;a href&gt; tag with the url provided through this
                attribute. Typically you would use this attribute along with one of the struts-like param attributes
                (param*) to create a dynamic link so that each row creates a different URL based on the data that is
                being viewed. An empty href value will generate a link to the current page, preserving parameters just
                like for paging links.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_maxLength"></a>maxLength</td><td>
                If this attribute is provided, then the column's displayed is limited to this number of characters. An
                elipse (...) is appended to the end if this column is linked, and the user can mouseover the elipse to
                get the full text. Be careful on using this attribute for String which can contain html tags or
                entities, or together with the autolink attribute turned on: displaytag will do its best trying to avoid
                leaving unclosed tags or broken entities in the output, but a complex or bad input could lead to
                unattended results.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_maxWords"></a>maxWords</td><td>
                If this attribute is provided, then the column's displayed is limited to this number of words. An elipse
                (...) is appended to the end if this column is linked, and the user can mouseover the elipse to get the
                full text. Be careful on using this attribute for String which can contain html tags or entities, or
                together with the autolink attribute turned on: displaytag will do its best trying to avoid leaving
                unclosed tags or broken entities in the output, but a complex or bad input could lead to unattended
                results.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_media"></a>media</td><td>
                Render the column for the media type(s). The column won't be added to the table if the current request
                media is not supported. Can be any space separated combination of 'html', 'csv', 'xml', 'all', or
                'excel'. Defaults to 'all'.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_nulls"></a>nulls</td><td>
                By default, null values don't appear in the list. By setting 'nulls' to 'true', then null values will
                appear as "null" in the list (mostly useful for debugging). Defaults to 'false'.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_paramId"></a>paramId</td><td>
                The name of the request parameter that will be dynamically added to the generated href URL. The
                corresponding value is defined by the perty and (optional) paramName attributes, optionally scoped by
                the paramScope attribute.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_paramName"></a>paramName</td><td>
                The name of a JSP bean that is a String containing the value for the request parameter named by paramId
                (if paramProperty is not specified), or a JSP bean whose property getter is called to return a String
                (if paramProperty is specified). The JSP bean is constrained to the bean scope specified by the
                paramScope property, if it is specified. If paramName is omitted, then it is assumed that the current
                object being iterated on is the target bean.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_paramProperty"></a>paramProperty</td><td>
                The name of a property of the current object being iterated on, whose return value will be used as the
                value of the parameter (named by the paramId attribute) that will be dynamically added to this href URL.
                If paramName is also specified the property will not be fetched from the object being iterated on, but
                from the bean specified by paramName. The support of paramProperty in conjunction with paramName will be
                probably removed in future: use paramProperty only if you need a property in the iterated object,
                elsewhere use only paramName (you can select a property using an expression name.property).
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_property"></a>property</td><td>
                name of the property in the bean specified in the parent table tag (via the "name" attribute) mapped to
                this column
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_sortable"></a>sortable</td><td>Set to 'true' to make the column sortable. Defaults to 'false'.</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_sortProperty"></a>sortProperty</td><td>
                name of the property in the bean specified in the parent table tag (via the "name" attribute) which will
                be used to sort values in the column. This can be used when the column body is filled or a decorator is
                used and column should sort on undeorated values.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_style"></a>style</td><td>html pass through attribute.</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_title"></a>title</td><td>title of the column (text for the th cell)</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_titleKey"></a>titleKey</td><td>
                Resource key used to lookup the title value. Only works if "title" is not defined. Works together with a
                configured I18nResourceProvider, specified via the displaytag.properties file. By default, if JSTL is
                available, the JSTL provider is used, which makes this attribute work the same as fmt:message's key
                property.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_url"></a>url</td><td>
                The base URL used to construct the dynamic link. This attribute has the same functionality as the href
                attribute, but it pre-pends the contextPath.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_width"></a><em class="deprecated">width</em></td><td>
                @deprecated; html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_styleClass"></a><em class="deprecated">styleClass</em></td><td>@deprecated: use "class"</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_headerStyleClass"></a><em class="deprecated">headerStyleClass</em></td><td>@deprecated: use "headerClass"</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_sort"></a><em class="deprecated">sort</em></td><td>@deprecated: use "sortable"</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_align"></a><em class="deprecated">align</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_background"></a><em class="deprecated">background</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_bgcolor"></a><em class="deprecated">bgcolor</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_height"></a><em class="deprecated">height</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_nowrap"></a><em class="deprecated">nowrap</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_valign"></a><em class="deprecated">valign</em></td><td>
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            </td><td><code>String</code></td>
</tr>
<tr>
<td><a name="column_paramScope"></a><em class="deprecated">paramScope</em></td><td>
                @deprecated - use Expressions in paramName. The scope within which to search for the bean specified by
                the paramName attribute. If not specified, all scopes are searched. If paramName is not provided, then
                the current object being iterated on is assumed to be the target bean.
            </td><td><code>String</code></td>
</tr>
</table>
</subsection>
</section>
<section name="setProperty">
<p>
<a name="setProperty"></a>
            Sets the indicated property on the enclosing Table tag. MUST be nested within a Table tag. As an
            alternative, you may create a property file that holds sitewide defaults; see the configuration
            documentation or the DisplayPropertiesLoaderServlet javadoc for information.
        </p>
<p> Can contain: JSP</p>
<subsection name="Example">
<source>
            
&lt;display:setProperty name="paging.banner.placement" value="bottom" /&gt;
or
&lt;display:setProperty name="paging.banner.placement"&gt;bottom&lt;/display:setProperty&gt;

        </source>
</subsection>
<subsection name="Attributes">
<table>
<tr>
<th>Name</th><th>Description</th><th>Type</th>
</tr>
<tr class="required" title="Required">
<td><a name="setProperty_name"></a><span style="color: red;">*</span>name</td><td>The name of the property to set on the enclosing Table tag.</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="setProperty_value"></a>value</td><td>
                The value to which the property is set. You can also set the property value in the tag body.
            </td><td><code>String</code></td>
</tr>
</table>
</subsection>
</section>
<section name="footer">
<p>
<a name="footer"></a>
            Tag wich should be nested into a table tag to provide a custom table footer. The body of the tag is
            outputted as is in the generated table in the tfoot section.
        </p>
<p> Can contain: JSP</p>
<subsection name="Example">
<source>
            
&lt;display:table name="someList"&gt;
  &lt;display:column property="mail"/&gt;
  &lt;display:column property="total"/&gt;
  &lt;display:footer&gt;
  	&lt;tr&gt;
  		&lt;td&gt;total:&lt;/td&gt;
  		&lt;td&gt;&lt;c:out value="${something}" /&gt;&lt;/td&gt;
  	&lt;tr&gt;
  &lt;/display:footer&gt;
&lt;/display:table&gt;

        </source>
</subsection>
<subsection name="Attributes">
<table>
<tr>
<td>This tag has no attributes.</td>
</tr>
</table>
</subsection>
</section>
<section name="caption">
<p>
<a name="caption"></a>
            Simple tag which mimics the html caption tag. Use it inside a table tag to display a caption.
        </p>
<p> Can contain: JSP</p>
<subsection name="Example">
<source>
            
&lt;display:table name="someList"&gt;
  &lt;display:column property="mail"/&gt;
  &lt;display:column property="total"/&gt;
  &lt;display:caption&gt;This is the table caption&lt;/display:caption&gt;
&lt;/display:table&gt;

        </source>
</subsection>
<subsection name="Attributes">
<table>
<tr>
<th>Name</th><th>Description</th><th>Type</th>
</tr>
<tr>
<td><a name="caption_class"></a>class</td><td>html pass through attribute.</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="caption_dir"></a>dir</td><td>html pass through attribute.</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="caption_id"></a>id</td><td>html pass through attribute.</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="caption_lang"></a>lang</td><td>html pass through attribute.</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="caption_style"></a>style</td><td>html pass through attribute.</td><td><code>String</code></td>
</tr>
<tr>
<td><a name="caption_title"></a>title</td><td>html pass through attribute.</td><td><code>String</code></td>
</tr>
</table>
</subsection>
</section>
</body>
</document>
