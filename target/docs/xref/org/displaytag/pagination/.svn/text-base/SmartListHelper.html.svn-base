<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1" /><title>SmartListHelper xref</title>
<link type="text/css" rel="stylesheet" href="../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../apidocs/org/displaytag/pagination/SmartListHelper.html">View Javadoc</a></div><pre>

<a name="1" href="#1">1</a>   <em>/**<em>*</em></em>
<a name="2" href="#2">2</a>   <em> * Licensed under the Artistic License; you may not use this file</em>
<a name="3" href="#3">3</a>   <em> * except in compliance with the License.</em>
<a name="4" href="#4">4</a>   <em> * You may obtain a copy of the License at</em>
<a name="5" href="#5">5</a>   <em> *</em>
<a name="6" href="#6">6</a>   <em> *      <a href="http://displaytag.sourceforge.net/license.html" target="alexandria_uri">http://displaytag.sourceforge.net/license.html</a></em>
<a name="7" href="#7">7</a>   <em> *</em>
<a name="8" href="#8">8</a>   <em> * THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR</em>
<a name="9" href="#9">9</a>   <em> * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED</em>
<a name="10" href="#10">10</a>  <em> * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.</em>
<a name="11" href="#11">11</a>  <em> */</em>
<a name="12" href="#12">12</a>  <strong>package</strong> <a href="../../../org/displaytag/pagination/package-summary.html">org.displaytag.pagination</a>;
<a name="13" href="#13">13</a>  
<a name="14" href="#14">14</a>  <strong>import</strong> java.text.MessageFormat;
<a name="15" href="#15">15</a>  <strong>import</strong> java.util.List;
<a name="16" href="#16">16</a>  
<a name="17" href="#17">17</a>  <strong>import</strong> javax.servlet.http.HttpSession;
<a name="18" href="#18">18</a>  
<a name="19" href="#19">19</a>  <strong>import</strong> org.apache.commons.lang.builder.ToStringBuilder;
<a name="20" href="#20">20</a>  <strong>import</strong> org.apache.commons.logging.Log;
<a name="21" href="#21">21</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;
<a name="22" href="#22">22</a>  <strong>import</strong> org.displaytag.Messages;
<a name="23" href="#23">23</a>  <strong>import</strong> org.displaytag.properties.TableProperties;
<a name="24" href="#24">24</a>  <strong>import</strong> org.displaytag.util.Href;
<a name="25" href="#25">25</a>  <strong>import</strong> org.displaytag.util.ShortToStringStyle;
<a name="26" href="#26">26</a>  
<a name="27" href="#27">27</a>  
<a name="28" href="#28">28</a>  <em>/**<em>*</em></em>
<a name="29" href="#29">29</a>  <em> * &lt;p></em>
<a name="30" href="#30">30</a>  <em> * Utility class that chops up a List of objects into small bite size pieces that are more suitable for display.</em>
<a name="31" href="#31">31</a>  <em> * &lt;/p></em>
<a name="32" href="#32">32</a>  <em> * &lt;p></em>
<a name="33" href="#33">33</a>  <em> * This class is a stripped down version of the WebListHelper from Tim Dawson (tdawson@is.com)</em>
<a name="34" href="#34">34</a>  <em> * &lt;/p></em>
<a name="35" href="#35">35</a>  <em> * @author epesh</em>
<a name="36" href="#36">36</a>  <em> * @author Fabrizio Giustina</em>
<a name="37" href="#37">37</a>  <em> * @author milene</em>
<a name="38" href="#38">38</a>  <em> * @version $Revision: 1.17 $ ($Author: fgiust $)</em>
<a name="39" href="#39">39</a>  <em> */</em>
<a name="40" href="#40">40</a>  <strong>public</strong> <strong>class</strong> <a href="../../../org/displaytag/pagination/SmartListHelper.html">SmartListHelper</a>
<a name="41" href="#41">41</a>  {
<a name="42" href="#42">42</a>  
<a name="43" href="#43">43</a>      <em>/**<em>*</em></em>
<a name="44" href="#44">44</a>  <em>     * logger.</em>
<a name="45" href="#45">45</a>  <em>     */</em>
<a name="46" href="#46">46</a>      <strong>private</strong> <strong>static</strong> Log log = LogFactory.getLog(SmartListHelper.<strong>class</strong>);
<a name="47" href="#47">47</a>  
<a name="48" href="#48">48</a>      <em>/**<em>*</em></em>
<a name="49" href="#49">49</a>  <em>     * full list.</em>
<a name="50" href="#50">50</a>  <em>     */</em>
<a name="51" href="#51">51</a>      <strong>private</strong> List fullList;
<a name="52" href="#52">52</a>  
<a name="53" href="#53">53</a>      <em>/**<em>*</em></em>
<a name="54" href="#54">54</a>  <em>     * sixe of the full list.</em>
<a name="55" href="#55">55</a>  <em>     */</em>
<a name="56" href="#56">56</a>      <strong>private</strong> <strong>int</strong> fullListSize;
<a name="57" href="#57">57</a>  
<a name="58" href="#58">58</a>      <em>/**<em>*</em></em>
<a name="59" href="#59">59</a>  <em>     * number of items in a page.</em>
<a name="60" href="#60">60</a>  <em>     */</em>
<a name="61" href="#61">61</a>      <strong>private</strong> <strong>int</strong> pageSize;
<a name="62" href="#62">62</a>  
<a name="63" href="#63">63</a>      <em>/**<em>*</em></em>
<a name="64" href="#64">64</a>  <em>     * number of pages.</em>
<a name="65" href="#65">65</a>  <em>     */</em>
<a name="66" href="#66">66</a>      <strong>private</strong> <strong>int</strong> pageCount;
<a name="67" href="#67">67</a>  
<a name="68" href="#68">68</a>      <em>/**<em>*</em></em>
<a name="69" href="#69">69</a>  <em>     * index of current page.</em>
<a name="70" href="#70">70</a>  <em>     */</em>
<a name="71" href="#71">71</a>      <strong>private</strong> <strong>int</strong> currentPage;
<a name="72" href="#72">72</a>      
<a name="73" href="#73">73</a>      <em>/**<em>*</em></em>
<a name="74" href="#74">74</a>  <em>     * index of current group</em>
<a name="75" href="#75">75</a>  <em>     */</em>
<a name="76" href="#76">76</a>      <strong>private</strong> <strong>int</strong> currentGroup;
<a name="77" href="#77">77</a>  
<a name="78" href="#78">78</a>      <em>/**<em>*</em></em>
<a name="79" href="#79">79</a>  <em>     * TableProperties.</em>
<a name="80" href="#80">80</a>  <em>     */</em>
<a name="81" href="#81">81</a>      <strong>private</strong> <a href="../../../org/displaytag/properties/TableProperties.html">TableProperties</a> properties;
<a name="82" href="#82">82</a>  
<a name="83" href="#83">83</a>      <em>/**<em>*</em></em>
<a name="84" href="#84">84</a>  <em>     * Creates a SmarListHelper instance that will help you chop up a list into bite size pieces that are suitable for</em>
<a name="85" href="#85">85</a>  <em>     * display.</em>
<a name="86" href="#86">86</a>  <em>     * @param list List</em>
<a name="87" href="#87">87</a>  <em>     * @param fullSize size of the full list</em>
<a name="88" href="#88">88</a>  <em>     * @param itemsInPage number of items in a page (int > 0)</em>
<a name="89" href="#89">89</a>  <em>     * @param tableProperties TableProperties</em>
<a name="90" href="#90">90</a>  <em>     */</em>
<a name="91" href="#91">91</a>      <strong>public</strong> <a href="../../../org/displaytag/pagination/SmartListHelper.html">SmartListHelper</a>(List list, <strong>int</strong> fullSize, <strong>int</strong> itemsInPage, <a href="../../../org/displaytag/properties/TableProperties.html">TableProperties</a> tableProperties)
<a name="92" href="#92">92</a>      {
<a name="93" href="#93">93</a>          <strong>if</strong> (log.isDebugEnabled())
<a name="94" href="#94">94</a>          {
<a name="95" href="#95">95</a>              log.debug(Messages.getString(<span class="string">"SmartListHelper.debug.instantiated"</span>, <em class="comment">//$NON-NLS-1$</em>
<a name="96" href="#96">96</a>                  <strong>new</strong> Object[]{<strong>new</strong> Integer(list.size()), <strong>new</strong> Integer(itemsInPage), <strong>new</strong> Integer(fullSize)}));
<a name="97" href="#97">97</a>          }
<a name="98" href="#98">98</a>  
<a name="99" href="#99">99</a>          <strong>this</strong>.properties = tableProperties;
<a name="100" href="#100">100</a>         <strong>this</strong>.pageSize = itemsInPage;
<a name="101" href="#101">101</a>         <strong>this</strong>.fullList = list;
<a name="102" href="#102">102</a>         <strong>this</strong>.fullListSize = fullSize;
<a name="103" href="#103">103</a>         <strong>this</strong>.pageCount = computedPageCount();
<a name="104" href="#104">104</a>         <strong>this</strong>.currentPage = 1;
<a name="105" href="#105">105</a>     }
<a name="106" href="#106">106</a> 
<a name="107" href="#107">107</a>     <em>/**<em>*</em></em>
<a name="108" href="#108">108</a> <em>     * Returns the computed number of pages it would take to show all the elements in the list given the pageSize we are</em>
<a name="109" href="#109">109</a> <em>     * working with.</em>
<a name="110" href="#110">110</a> <em>     * @return int computed number of pages</em>
<a name="111" href="#111">111</a> <em>     */</em>
<a name="112" href="#112">112</a>     <strong>protected</strong> <strong>int</strong> computedPageCount()
<a name="113" href="#113">113</a>     {
<a name="114" href="#114">114</a>         <strong>int</strong> size = <strong>this</strong>.fullListSize;
<a name="115" href="#115">115</a>         <strong>int</strong> div = size / <strong>this</strong>.pageSize;
<a name="116" href="#116">116</a>         <strong>int</strong> mod = size % <strong>this</strong>.pageSize;
<a name="117" href="#117">117</a>         <strong>int</strong> result = (mod == 0) ? div : div + 1;
<a name="118" href="#118">118</a> 
<a name="119" href="#119">119</a>         <strong>return</strong> result;
<a name="120" href="#120">120</a>     }
<a name="121" href="#121">121</a> 
<a name="122" href="#122">122</a>     <em>/**<em>*</em></em>
<a name="123" href="#123">123</a> <em>     * Returns the index into the master list of the first object that should appear on the current page that the user</em>
<a name="124" href="#124">124</a> <em>     * is viewing.</em>
<a name="125" href="#125">125</a> <em>     * @return int index of the first object that should appear on the current page</em>
<a name="126" href="#126">126</a> <em>     */</em>
<a name="127" href="#127">127</a>     <strong>public</strong> <strong>int</strong> getFirstIndexForCurrentPage()
<a name="128" href="#128">128</a>     {
<a name="129" href="#129">129</a>         <strong>return</strong> getFirstIndexForPage(<strong>this</strong>.currentPage);
<a name="130" href="#130">130</a>     }
<a name="131" href="#131">131</a> 
<a name="132" href="#132">132</a>     <em>/**<em>*</em></em>
<a name="133" href="#133">133</a> <em>     * Returns the index into the master list of the last object that should appear on the current page that the user is</em>
<a name="134" href="#134">134</a> <em>     * viewing.</em>
<a name="135" href="#135">135</a> <em>     * @return int</em>
<a name="136" href="#136">136</a> <em>     */</em>
<a name="137" href="#137">137</a>     <strong>protected</strong> <strong>int</strong> getLastIndexForCurrentPage()
<a name="138" href="#138">138</a>     {
<a name="139" href="#139">139</a> 
<a name="140" href="#140">140</a>         <strong>return</strong> getLastIndexForPage(<strong>this</strong>.currentPage);
<a name="141" href="#141">141</a>     }
<a name="142" href="#142">142</a> 
<a name="143" href="#143">143</a>     <em>/**<em>*</em></em>
<a name="144" href="#144">144</a> <em>     * Returns the index into the master list of the first object that should appear on the given page.</em>
<a name="145" href="#145">145</a> <em>     * @param pageNumber page number</em>
<a name="146" href="#146">146</a> <em>     * @return int index of the first object that should appear on the given page</em>
<a name="147" href="#147">147</a> <em>     */</em>
<a name="148" href="#148">148</a>     <strong>protected</strong> <strong>int</strong> getFirstIndexForPage(<strong>int</strong> pageNumber)
<a name="149" href="#149">149</a>     {
<a name="150" href="#150">150</a>         <em class="comment">//return (pageNumber - 1) * this.pageSize;</em>
<a name="151" href="#151">151</a>     	
<a name="152" href="#152">152</a>     	<strong>int</strong> pageReferencia = pageNumber - ((<strong>this</strong>.currentGroup -1) * <strong>this</strong>.properties.getPagingGroupSize());
<a name="153" href="#153">153</a>     	<strong>return</strong>  (pageReferencia - 1) * <strong>this</strong>.pageSize;
<a name="154" href="#154">154</a> 
<a name="155" href="#155">155</a>     }
<a name="156" href="#156">156</a> 
<a name="157" href="#157">157</a>     <em>/**<em>*</em></em>
<a name="158" href="#158">158</a> <em>     * Returns the index into the master list of the last object that should appear on the given page.</em>
<a name="159" href="#159">159</a> <em>     * @param pageNumber page number</em>
<a name="160" href="#160">160</a> <em>     * @return int index of the last object that should appear on the given page</em>
<a name="161" href="#161">161</a> <em>     */</em>
<a name="162" href="#162">162</a>     <strong>protected</strong> <strong>int</strong> getLastIndexForPage(<strong>int</strong> pageNumber)
<a name="163" href="#163">163</a>     {
<a name="164" href="#164">164</a> 
<a name="165" href="#165">165</a>         <strong>int</strong> firstIndex = getFirstIndexForPage(pageNumber);
<a name="166" href="#166">166</a>         <strong>int</strong> pageIndex = <strong>this</strong>.pageSize - 1;
<a name="167" href="#167">167</a>         <strong>int</strong> lastIndex = <strong>this</strong>.fullListSize - 1;
<a name="168" href="#168">168</a> 
<a name="169" href="#169">169</a>         <strong>return</strong> Math.min(firstIndex + pageIndex, lastIndex);
<a name="170" href="#170">170</a>     }
<a name="171" href="#171">171</a> 
<a name="172" href="#172">172</a>     <em>/**<em>*</em></em>
<a name="173" href="#173">173</a> <em>     * Returns a subsection of the list that contains just the elements that are supposed to be shown on the current</em>
<a name="174" href="#174">174</a> <em>     * page the user is viewing.</em>
<a name="175" href="#175">175</a> <em>     * @return List subsection of the list that contains the elements that are supposed to be shown on the current page</em>
<a name="176" href="#176">176</a> <em>     */</em>
<a name="177" href="#177">177</a>     <strong>public</strong> List getListForCurrentPage()
<a name="178" href="#178">178</a>     {
<a name="179" href="#179">179</a> 
<a name="180" href="#180">180</a>         <strong>return</strong> getListForPage(<strong>this</strong>.currentPage);
<a name="181" href="#181">181</a>     }
<a name="182" href="#182">182</a> 
<a name="183" href="#183">183</a>     <em>/**<em>*</em></em>
<a name="184" href="#184">184</a> <em>     * Returns a subsection of the list that contains just the elements that are supposed to be shown on the given page.</em>
<a name="185" href="#185">185</a> <em>     * @param pageNumber page number</em>
<a name="186" href="#186">186</a> <em>     * @return List subsection of the list that contains just the elements that are supposed to be shown on the given</em>
<a name="187" href="#187">187</a> <em>     * page</em>
<a name="188" href="#188">188</a> <em>     */</em>
<a name="189" href="#189">189</a>     <strong>protected</strong> List getListForPage(<strong>int</strong> pageNumber)
<a name="190" href="#190">190</a>     {
<a name="191" href="#191">191</a>         <strong>if</strong> (log.isDebugEnabled())
<a name="192" href="#192">192</a>         {
<a name="193" href="#193">193</a>             log.debug(Messages.getString(<span class="string">"SmartListHelper.debug.sublist"</span>, <em class="comment">//$NON-NLS-1$</em>
<a name="194" href="#194">194</a>                 <strong>new</strong> Object[]{<strong>new</strong> Integer(pageNumber)}));
<a name="195" href="#195">195</a>         }
<a name="196" href="#196">196</a> 
<a name="197" href="#197">197</a>         <strong>int</strong> firstIndex = getFirstIndexForPage(pageNumber);
<a name="198" href="#198">198</a>         <strong>int</strong> lastIndex = getLastIndexForPage(pageNumber);
<a name="199" href="#199">199</a>         <strong>return</strong> <strong>this</strong>.fullList.subList(firstIndex, lastIndex + 1);
<a name="200" href="#200">200</a>     }
<a name="201" href="#201">201</a> 
<a name="202" href="#202">202</a>     <em>/**<em>*</em></em>
<a name="203" href="#203">203</a> <em>     * Set's the page number that the user is viewing.</em>
<a name="204" href="#204">204</a> <em>     * @param pageNumber page number</em>
<a name="205" href="#205">205</a> <em>     */</em>
<a name="206" href="#206">206</a>     <strong>public</strong> <strong>void</strong> setCurrentPage(<strong>int</strong> pageNumber)
<a name="207" href="#207">207</a>     {
<a name="208" href="#208">208</a>         <strong>if</strong> (log.isDebugEnabled())
<a name="209" href="#209">209</a>         {
<a name="210" href="#210">210</a>             log.debug(Messages.getString(<span class="string">"SmartListHelper.debug.currentpage"</span>, <em class="comment">//$NON-NLS-1$</em>
<a name="211" href="#211">211</a>                 <strong>new</strong> Object[]{<strong>new</strong> Integer(pageNumber), <strong>new</strong> Integer(<strong>this</strong>.pageCount)}));
<a name="212" href="#212">212</a>         }
<a name="213" href="#213">213</a> 
<a name="214" href="#214">214</a>         <em class="comment">//if (pageNumber &lt; 1 || ((pageNumber != 1) &amp;&amp; (pageNumber > this.pageCount)))</em>
<a name="215" href="#215">215</a>         <strong>if</strong> (pageNumber &lt; 1 )
<a name="216" href="#216">216</a>         {
<a name="217" href="#217">217</a>             <em class="comment">// invalid page: better don't throw an exception, since this could easily happen</em>
<a name="218" href="#218">218</a>             <em class="comment">// (list changed, user bookmarked the page)</em>
<a name="219" href="#219">219</a>             <strong>this</strong>.currentPage = 1;
<a name="220" href="#220">220</a>         }
<a name="221" href="#221">221</a>         <strong>else</strong>
<a name="222" href="#222">222</a>         {
<a name="223" href="#223">223</a>             <strong>this</strong>.currentPage = pageNumber;
<a name="224" href="#224">224</a>         }
<a name="225" href="#225">225</a>     }
<a name="226" href="#226">226</a> 
<a name="227" href="#227">227</a>     <em>/**<em>*</em></em>
<a name="228" href="#228">228</a> <em>     * Return the little summary message that lets the user know how many objects are in the list they are viewing, and</em>
<a name="229" href="#229">229</a> <em>     * where in the list they are currently positioned. The message looks like: nnn [item(s)] found, displaying nnn to</em>
<a name="230" href="#230">230</a> <em>     * nnn. [item(s)] is replaced by either itemName or itemNames depending on if it should be signular or plural.</em>
<a name="231" href="#231">231</a> <em>     * @return String</em>
<a name="232" href="#232">232</a> <em>     */</em>
<a name="233" href="#233">233</a>     <strong>public</strong> String getSearchResultsSummary()
<a name="234" href="#234">234</a>     {
<a name="235" href="#235">235</a> 
<a name="236" href="#236">236</a>         Object[] objs;
<a name="237" href="#237">237</a>         String message;
<a name="238" href="#238">238</a> 
<a name="239" href="#239">239</a>         <strong>if</strong> (<strong>this</strong>.fullListSize == 0)
<a name="240" href="#240">240</a>         {
<a name="241" href="#241">241</a>             objs = <strong>new</strong> Object[]{<strong>this</strong>.properties.getPagingItemsName()};
<a name="242" href="#242">242</a>             message = <strong>this</strong>.properties.getPagingFoundNoItems();
<a name="243" href="#243">243</a> 
<a name="244" href="#244">244</a>         }
<a name="245" href="#245">245</a>         <strong>else</strong> <strong>if</strong> (<strong>this</strong>.fullListSize == 1 &amp;&amp; <strong>this</strong>.currentGroup == 1)
<a name="246" href="#246">246</a>         {
<a name="247" href="#247">247</a>             objs = <strong>new</strong> Object[]{<strong>this</strong>.properties.getPagingItemName()};
<a name="248" href="#248">248</a>             message = <strong>this</strong>.properties.getPagingFoundOneItem();
<a name="249" href="#249">249</a>         }
<a name="250" href="#250">250</a>         <strong>else</strong> <strong>if</strong> (computedPageCount() == 1 &amp;&amp; <strong>this</strong>.currentGroup == 1)
<a name="251" href="#251">251</a>         {
<a name="252" href="#252">252</a>             objs = <strong>new</strong> Object[]{
<a name="253" href="#253">253</a>                 <strong>new</strong> Integer(<strong>this</strong>.fullListSize),
<a name="254" href="#254">254</a>                 <strong>this</strong>.properties.getPagingItemsName(),
<a name="255" href="#255">255</a>                 <strong>this</strong>.properties.getPagingItemsName()};
<a name="256" href="#256">256</a>             message = <strong>this</strong>.properties.getPagingFoundAllItems();
<a name="257" href="#257">257</a>         }
<a name="258" href="#258">258</a>         <strong>else</strong>
<a name="259" href="#259">259</a>         {
<a name="260" href="#260">260</a>             <strong>int</strong> startPage = ((<strong>this</strong>.currentGroup -1) * <strong>this</strong>.properties.getPagingGroupSize()) + 1;
<a name="261" href="#261">261</a>             <strong>int</strong> endPage = Math.min(startPage + <strong>this</strong>.properties.getPagingGroupSize() - 1, startPage + <strong>this</strong>.pageCount -1);
<a name="262" href="#262">262</a>             <em class="comment">/*<em class="comment">objs = new Object[]{</em></em>
<a name="263" href="#263">263</a> <em class="comment">                new Integer(this.fullListSize),</em>
<a name="264" href="#264">264</a> <em class="comment">                this.properties.getPagingItemsName(),</em>
<a name="265" href="#265">265</a> <em class="comment">                new Integer(getFirstIndexForCurrentPage() + 1),</em>
<a name="266" href="#266">266</a> <em class="comment">                new Integer(getLastIndexForCurrentPage() + 1),</em>
<a name="267" href="#267">267</a> <em class="comment">                new Integer(this.currentPage),</em>
<a name="268" href="#268">268</a> <em class="comment">                new Integer(this.pageCount)};*/</em>
<a name="269" href="#269">269</a>         	objs = <strong>new</strong> Object[]{<strong>new</strong> Integer(<strong>this</strong>.currentGroup), <strong>new</strong> Integer(startPage), <strong>new</strong> Integer(endPage)};        	
<a name="270" href="#270">270</a>             message = <strong>this</strong>.properties.getPagingFoundSomeItems();
<a name="271" href="#271">271</a>         }
<a name="272" href="#272">272</a> 
<a name="273" href="#273">273</a>         <strong>return</strong> MessageFormat.format(message, objs);
<a name="274" href="#274">274</a>     }
<a name="275" href="#275">275</a> 
<a name="276" href="#276">276</a>     <em>/**<em>*</em></em>
<a name="277" href="#277">277</a> <em>     * Returns a string containing the nagivation bar that allows the user to move between pages within the list. The</em>
<a name="278" href="#278">278</a> <em>     * urlFormatString should be a URL that looks like the following: somepage.page?page={0}</em>
<a name="279" href="#279">279</a> <em>     * @param baseHref Href used for links</em>
<a name="280" href="#280">280</a> <em>     * @param pageParameter name for the page parameter</em>
<a name="281" href="#281">281</a> <em>     * @return String</em>
<a name="282" href="#282">282</a> <em>     */</em>
<a name="283" href="#283">283</a>     <strong>public</strong> String getPageNavigationBar(<a href="../../../org/displaytag/util/Href.html">Href</a> baseHref, <a href="../../../org/displaytag/util/Href.html">Href</a> baseHrefAction, String pageParameter, String groupParameter, String tableParameter, String tableName, HttpSession session)
<a name="284" href="#284">284</a>     {
<a name="285" href="#285">285</a> 
<a name="286" href="#286">286</a>         <strong>int</strong> groupSize = <strong>this</strong>.properties.getPagingGroupSize();
<a name="287" href="#287">287</a>         <strong>int</strong> startPage;
<a name="288" href="#288">288</a>         <strong>int</strong> endPage;
<a name="289" href="#289">289</a> 
<a name="290" href="#290">290</a>        
<a name="291" href="#291">291</a>         <a href="../../../org/displaytag/pagination/Pagination.html">Pagination</a> pagination = <strong>new</strong> <a href="../../../org/displaytag/pagination/Pagination.html">Pagination</a>(baseHref, baseHrefAction, pageParameter, groupParameter, tableParameter, tableName, session);
<a name="292" href="#292">292</a>         pagination.setCurrentGroup(<strong>new</strong> Integer(<strong>this</strong>.currentGroup));
<a name="293" href="#293">293</a>         pagination.setCurrent(<strong>new</strong> Integer(<strong>this</strong>.currentPage));
<a name="294" href="#294">294</a> 
<a name="295" href="#295">295</a>         <em class="comment">// if no items are found still add pagination?</em>
<a name="296" href="#296">296</a>         <strong>if</strong> (<strong>this</strong>.pageCount == 0)
<a name="297" href="#297">297</a>         {
<a name="298" href="#298">298</a>             pagination.addPage(1, <strong>true</strong>, 1);
<a name="299" href="#299">299</a>         }
<a name="300" href="#300">300</a> 
<a name="301" href="#301">301</a>         <em class="comment">// center the selected page, but only if there are {groupSize} pages available after it, and check that the</em>
<a name="302" href="#302">302</a>         <em class="comment">// result is not &lt; 1</em>
<a name="303" href="#303">303</a>         
<a name="304" href="#304">304</a>        <em class="comment">// startPage = Math.max(Math.min(this.currentPage - groupSize / 2, this.pageCount - groupSize), 1);</em>
<a name="305" href="#305">305</a>        <em class="comment">// endPage = Math.min(startPage + groupSize - 1, this.pageCount);</em>
<a name="306" href="#306">306</a>         
<a name="307" href="#307">307</a>         startPage = ((<strong>this</strong>.currentGroup -1) * groupSize) + 1;
<a name="308" href="#308">308</a>         endPage = Math.min(startPage + groupSize - 1, startPage + <strong>this</strong>.pageCount -1) ;
<a name="309" href="#309">309</a> 
<a name="310" href="#310">310</a>         <strong>if</strong> (log.isDebugEnabled())
<a name="311" href="#311">311</a>         {
<a name="312" href="#312">312</a>             log.debug(<span class="string">"Displaying pages from "</span> + startPage + <span class="string">" to "</span> + endPage);
<a name="313" href="#313">313</a>         }
<a name="314" href="#314">314</a> 
<a name="315" href="#315">315</a>         <strong>if</strong> (<strong>this</strong>.currentPage != 1)
<a name="316" href="#316">316</a>         {
<a name="317" href="#317">317</a>             pagination.setFirst(<strong>new</strong> Integer(1));
<a name="318" href="#318">318</a>             pagination.setPrevious(<strong>new</strong> Integer(<strong>this</strong>.currentPage - 1));
<a name="319" href="#319">319</a>         }
<a name="320" href="#320">320</a> 
<a name="321" href="#321">321</a>         <strong>for</strong> (<strong>int</strong> j = startPage; j &lt;= endPage; j++)
<a name="322" href="#322">322</a>         {
<a name="323" href="#323">323</a>             <strong>if</strong> (log.isDebugEnabled())
<a name="324" href="#324">324</a>             {
<a name="325" href="#325">325</a>                 log.debug(<span class="string">"adding page "</span> + j); <em class="comment">//$NON-NLS-1$</em>
<a name="326" href="#326">326</a>             }
<a name="327" href="#327">327</a>             pagination.addPage(j, (j == <strong>this</strong>.currentPage), <strong>this</strong>.currentGroup);
<a name="328" href="#328">328</a>         }
<a name="329" href="#329">329</a> 
<a name="330" href="#330">330</a>         <strong>if</strong> (<strong>this</strong>.currentPage != <strong>this</strong>.pageCount)
<a name="331" href="#331">331</a>         {
<a name="332" href="#332">332</a>             pagination.setNext(<strong>new</strong> Integer(<strong>this</strong>.currentPage + 1));
<a name="333" href="#333">333</a>             pagination.setLast(<strong>new</strong> Integer(<strong>this</strong>.pageCount));
<a name="334" href="#334">334</a>         }
<a name="335" href="#335">335</a> 
<a name="336" href="#336">336</a>         <em class="comment">// format for previous/next banner</em>
<a name="337" href="#337">337</a>         String bannerFormat;
<a name="338" href="#338">338</a> 
<a name="339" href="#339">339</a>         <em class="comment">/*<em class="comment">if (pagination.isOnePage())</em></em>
<a name="340" href="#340">340</a> <em class="comment">        {</em>
<a name="341" href="#341">341</a> <em class="comment">            bannerFormat = this.properties.getPagingBannerOnePage();</em>
<a name="342" href="#342">342</a> <em class="comment">        }</em>
<a name="343" href="#343">343</a> <em class="comment">        else if (pagination.isFirst())</em>
<a name="344" href="#344">344</a> <em class="comment">        {</em>
<a name="345" href="#345">345</a> <em class="comment">            bannerFormat = this.properties.getPagingBannerFirst();</em>
<a name="346" href="#346">346</a> <em class="comment">        }</em>
<a name="347" href="#347">347</a> <em class="comment">        else if (pagination.isLast())</em>
<a name="348" href="#348">348</a> <em class="comment">        {</em>
<a name="349" href="#349">349</a> <em class="comment">            bannerFormat = this.properties.getPagingBannerLast();</em>
<a name="350" href="#350">350</a> <em class="comment">        }</em>
<a name="351" href="#351">351</a> <em class="comment">        else</em>
<a name="352" href="#352">352</a> <em class="comment">        {</em>
<a name="353" href="#353">353</a> <em class="comment">            bannerFormat = this.properties.getPagingBannerFull();</em>
<a name="354" href="#354">354</a> <em class="comment">        }*/</em>
<a name="355" href="#355">355</a>         
<a name="356" href="#356">356</a>         <strong>if</strong> (pagination.isOnePage() &amp;&amp; <strong>this</strong>.currentGroup == 1)
<a name="357" href="#357">357</a>         {
<a name="358" href="#358">358</a>             bannerFormat = <strong>this</strong>.properties.getPagingBannerOnePage();
<a name="359" href="#359">359</a>         }
<a name="360" href="#360">360</a>         <strong>else</strong> <strong>if</strong> (<strong>this</strong>.currentGroup == 1)
<a name="361" href="#361">361</a>         {
<a name="362" href="#362">362</a>         	<strong>if</strong>(<strong>this</strong>.fullListSize &lt; <strong>this</strong>.pageSize * <strong>this</strong>.properties.getPagingGroupSize())
<a name="363" href="#363">363</a>         		bannerFormat = <strong>this</strong>.properties.getPagingBannerFirstLast();
<a name="364" href="#364">364</a>         	<strong>else</strong>
<a name="365" href="#365">365</a>         		bannerFormat = <strong>this</strong>.properties.getPagingBannerFirst();
<a name="366" href="#366">366</a>         }
<a name="367" href="#367">367</a>         <strong>else</strong> <strong>if</strong> (<strong>this</strong>.fullListSize &lt; <strong>this</strong>.pageSize * <strong>this</strong>.properties.getPagingGroupSize())
<a name="368" href="#368">368</a>         {
<a name="369" href="#369">369</a>             bannerFormat = <strong>this</strong>.properties.getPagingBannerLast();
<a name="370" href="#370">370</a>         }
<a name="371" href="#371">371</a>         <strong>else</strong>
<a name="372" href="#372">372</a>         {
<a name="373" href="#373">373</a>             bannerFormat = <strong>this</strong>.properties.getPagingBannerFull();
<a name="374" href="#374">374</a>         }   
<a name="375" href="#375">375</a> 
<a name="376" href="#376">376</a>         <strong>return</strong> pagination.getFormattedBanner(<strong>this</strong>.properties.getPagingPageLink(), <strong>this</strong>.properties
<a name="377" href="#377">377</a>             .getPagingPageSelected(), <strong>this</strong>.properties.getPagingPageSeparator(), bannerFormat);
<a name="378" href="#378">378</a>     }
<a name="379" href="#379">379</a> 
<a name="380" href="#380">380</a>     <em>/**<em>*</em></em>
<a name="381" href="#381">381</a> <em>     * @see java.lang.Object#toString()</em>
<a name="382" href="#382">382</a> <em>     */</em>
<a name="383" href="#383">383</a>     <strong>public</strong> String toString()
<a name="384" href="#384">384</a>     {
<a name="385" href="#385">385</a>         <strong>return</strong> <strong>new</strong> ToStringBuilder(<strong>this</strong>, ShortToStringStyle.SHORT_STYLE) <em class="comment">//</em>
<a name="386" href="#386">386</a>             .append(<span class="string">"fullList"</span>, <strong>this</strong>.fullList) <em class="comment">//$NON-NLS-1$</em>
<a name="387" href="#387">387</a>             .append(<span class="string">"fullListSize"</span>, <strong>this</strong>.fullListSize) <em class="comment">//$NON-NLS-1$</em>
<a name="388" href="#388">388</a>             .append(<span class="string">"pageSize"</span>, <strong>this</strong>.pageSize) <em class="comment">//$NON-NLS-1$</em>
<a name="389" href="#389">389</a>             .append(<span class="string">"pageCount"</span>, <strong>this</strong>.pageCount) <em class="comment">//$NON-NLS-1$</em>
<a name="390" href="#390">390</a>             .append(<span class="string">"properties"</span>, <strong>this</strong>.properties) <em class="comment">//$NON-NLS-1$</em>
<a name="391" href="#391">391</a>             .append(<span class="string">"currentPage"</span>, <strong>this</strong>.currentPage) <em class="comment">//$NON-NLS-1$</em>
<a name="392" href="#392">392</a>             .toString();
<a name="393" href="#393">393</a>     }
<a name="394" href="#394">394</a> 
<a name="395" href="#395">395</a> 	<strong>public</strong> <strong>void</strong> setCurrentGroup(<strong>int</strong> currentGroup) {
<a name="396" href="#396">396</a> 		<strong>this</strong>.currentGroup = currentGroup;
<a name="397" href="#397">397</a> 	}
<a name="398" href="#398">398</a> }
</pre>
<hr/><div id="footer">This page was automatically generated by <a href="http://maven.apache.org/">Maven</a></div></body>
</html>

