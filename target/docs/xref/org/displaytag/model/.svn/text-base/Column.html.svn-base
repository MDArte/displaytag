<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1" /><title>Column xref</title>
<link type="text/css" rel="stylesheet" href="../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../apidocs/org/displaytag/model/Column.html">View Javadoc</a></div><pre>

<a name="1" href="#1">1</a>   <em>/**<em>*</em></em>
<a name="2" href="#2">2</a>   <em> * Licensed under the Artistic License; you may not use this file</em>
<a name="3" href="#3">3</a>   <em> * except in compliance with the License.</em>
<a name="4" href="#4">4</a>   <em> * You may obtain a copy of the License at</em>
<a name="5" href="#5">5</a>   <em> *</em>
<a name="6" href="#6">6</a>   <em> *      <a href="http://displaytag.sourceforge.net/license.html" target="alexandria_uri">http://displaytag.sourceforge.net/license.html</a></em>
<a name="7" href="#7">7</a>   <em> *</em>
<a name="8" href="#8">8</a>   <em> * THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR</em>
<a name="9" href="#9">9</a>   <em> * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED</em>
<a name="10" href="#10">10</a>  <em> * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.</em>
<a name="11" href="#11">11</a>  <em> */</em>
<a name="12" href="#12">12</a>  <strong>package</strong> <a href="../../../org/displaytag/model/package-summary.html">org.displaytag.model</a>;
<a name="13" href="#13">13</a>  
<a name="14" href="#14">14</a>  <strong>import</strong> org.apache.commons.lang.ObjectUtils;
<a name="15" href="#15">15</a>  <strong>import</strong> org.apache.commons.lang.builder.ToStringBuilder;
<a name="16" href="#16">16</a>  <strong>import</strong> org.displaytag.decorator.AutolinkColumnDecorator;
<a name="17" href="#17">17</a>  <strong>import</strong> org.displaytag.decorator.TableDecorator;
<a name="18" href="#18">18</a>  <strong>import</strong> org.displaytag.exception.DecoratorException;
<a name="19" href="#19">19</a>  <strong>import</strong> org.displaytag.exception.ObjectLookupException;
<a name="20" href="#20">20</a>  <strong>import</strong> org.displaytag.util.Anchor;
<a name="21" href="#21">21</a>  <strong>import</strong> org.displaytag.util.CompatibleUrlEncoder;
<a name="22" href="#22">22</a>  <strong>import</strong> org.displaytag.util.Href;
<a name="23" href="#23">23</a>  <strong>import</strong> org.displaytag.util.HtmlAttributeMap;
<a name="24" href="#24">24</a>  <strong>import</strong> org.displaytag.util.HtmlTagUtil;
<a name="25" href="#25">25</a>  <strong>import</strong> org.displaytag.util.LookupUtil;
<a name="26" href="#26">26</a>  <strong>import</strong> org.displaytag.util.ShortToStringStyle;
<a name="27" href="#27">27</a>  <strong>import</strong> org.displaytag.util.TagConstants;
<a name="28" href="#28">28</a>  
<a name="29" href="#29">29</a>  
<a name="30" href="#30">30</a>  <em>/**<em>*</em></em>
<a name="31" href="#31">31</a>  <em> * Represents a column in a table.</em>
<a name="32" href="#32">32</a>  <em> * @author Fabrizio Giustina</em>
<a name="33" href="#33">33</a>  <em> * @version $Revision: 1.20 $ ($Author: fgiust $)</em>
<a name="34" href="#34">34</a>  <em> */</em>
<a name="35" href="#35">35</a>  <strong>public</strong> <strong>class</strong> <a href="../../../org/displaytag/model/Column.html">Column</a>
<a name="36" href="#36">36</a>  {
<a name="37" href="#37">37</a>  
<a name="38" href="#38">38</a>      <em>/**<em>*</em></em>
<a name="39" href="#39">39</a>  <em>     * Row this column belongs to.</em>
<a name="40" href="#40">40</a>  <em>     */</em>
<a name="41" href="#41">41</a>      <strong>private</strong> <a href="../../../org/displaytag/model/Row.html">Row</a> row;
<a name="42" href="#42">42</a>  
<a name="43" href="#43">43</a>      <em>/**<em>*</em></em>
<a name="44" href="#44">44</a>  <em>     * Header of this column. The header cell contains all the attributes common to all cells in the same column</em>
<a name="45" href="#45">45</a>  <em>     */</em>
<a name="46" href="#46">46</a>      <strong>private</strong> <a href="../../../org/displaytag/model/HeaderCell.html">HeaderCell</a> header;
<a name="47" href="#47">47</a>  
<a name="48" href="#48">48</a>      <em>/**<em>*</em></em>
<a name="49" href="#49">49</a>  <em>     * copy of the attribute map from the header cell. Needed to change attributes (title) in this cell only</em>
<a name="50" href="#50">50</a>  <em>     */</em>
<a name="51" href="#51">51</a>      <strong>private</strong> <a href="../../../org/displaytag/util/HtmlAttributeMap.html">HtmlAttributeMap</a> htmlAttributes;
<a name="52" href="#52">52</a>  
<a name="53" href="#53">53</a>      <em>/**<em>*</em></em>
<a name="54" href="#54">54</a>  <em>     * contains the evaluated body value. Filled in getOpenTag.</em>
<a name="55" href="#55">55</a>  <em>     */</em>
<a name="56" href="#56">56</a>      <strong>private</strong> String stringValue;
<a name="57" href="#57">57</a>  
<a name="58" href="#58">58</a>      <em>/**<em>*</em></em>
<a name="59" href="#59">59</a>  <em>     * Cell.</em>
<a name="60" href="#60">60</a>  <em>     */</em>
<a name="61" href="#61">61</a>      <strong>private</strong> <a href="../../../org/displaytag/model/Cell.html">Cell</a> cell;
<a name="62" href="#62">62</a>  
<a name="63" href="#63">63</a>      <em>/**<em>*</em></em>
<a name="64" href="#64">64</a>  <em>     * Constructor for Column.</em>
<a name="65" href="#65">65</a>  <em>     * @param headerCell HeaderCell</em>
<a name="66" href="#66">66</a>  <em>     * @param currentCell Cell</em>
<a name="67" href="#67">67</a>  <em>     * @param parentRow Row</em>
<a name="68" href="#68">68</a>  <em>     */</em>
<a name="69" href="#69">69</a>      <strong>public</strong> <a href="../../../org/displaytag/model/Column.html">Column</a>(<a href="../../../org/displaytag/model/HeaderCell.html">HeaderCell</a> headerCell, <a href="../../../org/displaytag/model/Cell.html">Cell</a> currentCell, <a href="../../../org/displaytag/model/Row.html">Row</a> parentRow)
<a name="70" href="#70">70</a>      {
<a name="71" href="#71">71</a>          <strong>this</strong>.header = headerCell;
<a name="72" href="#72">72</a>          <strong>this</strong>.row = parentRow;
<a name="73" href="#73">73</a>          <strong>this</strong>.cell = currentCell;
<a name="74" href="#74">74</a>  
<a name="75" href="#75">75</a>          <em class="comment">// also copy html attributes</em>
<a name="76" href="#76">76</a>          <strong>this</strong>.htmlAttributes = headerCell.getHtmlAttributes();
<a name="77" href="#77">77</a>      }
<a name="78" href="#78">78</a>  
<a name="79" href="#79">79</a>      <em>/**<em>*</em></em>
<a name="80" href="#80">80</a>  <em>     * Gets the value, after calling the table / column decorator is requested.</em>
<a name="81" href="#81">81</a>  <em>     * @param decorated boolean</em>
<a name="82" href="#82">82</a>  <em>     * @return Object</em>
<a name="83" href="#83">83</a>  <em>     * @throws ObjectLookupException for errors in bean property lookup</em>
<a name="84" href="#84">84</a>  <em>     * @throws DecoratorException if a column decorator is used and an exception is thrown during value decoration</em>
<a name="85" href="#85">85</a>  <em>     */</em>
<a name="86" href="#86">86</a>      <strong>public</strong> Object getValue(<strong>boolean</strong> decorated) throws ObjectLookupException, DecoratorException
<a name="87" href="#87">87</a>      {
<a name="88" href="#88">88</a>  
<a name="89" href="#89">89</a>          Object object = <strong>null</strong>;
<a name="90" href="#90">90</a>  
<a name="91" href="#91">91</a>          <em class="comment">// a static value has been set?</em>
<a name="92" href="#92">92</a>          <strong>if</strong> (<strong>this</strong>.cell.getStaticValue() != <strong>null</strong>)
<a name="93" href="#93">93</a>          {
<a name="94" href="#94">94</a>              object = <strong>this</strong>.cell.getStaticValue();
<a name="95" href="#95">95</a>          }
<a name="96" href="#96">96</a>          <strong>else</strong> <strong>if</strong> (<strong>this</strong>.header.getBeanPropertyName() != <strong>null</strong>)
<a name="97" href="#97">97</a>          {
<a name="98" href="#98">98</a>              <a href="../../../org/displaytag/decorator/TableDecorator.html">TableDecorator</a> tableDecorator = <strong>this</strong>.row.getParentTable().getTableDecorator();
<a name="99" href="#99">99</a>  
<a name="100" href="#100">100</a>             <em class="comment">// if a decorator has been set, and if decorator has a getter for the requested property only, check</em>
<a name="101" href="#101">101</a>             <em class="comment">// decorator</em>
<a name="102" href="#102">102</a>             <strong>if</strong> (decorated &amp;&amp; tableDecorator != <strong>null</strong> &amp;&amp; tableDecorator.hasGetterFor(<strong>this</strong>.header.getBeanPropertyName()))
<a name="103" href="#103">103</a>             {
<a name="104" href="#104">104</a> 
<a name="105" href="#105">105</a>                 object = LookupUtil.getBeanProperty(tableDecorator, <strong>this</strong>.header.getBeanPropertyName());
<a name="106" href="#106">106</a>             }
<a name="107" href="#107">107</a>             <strong>else</strong>
<a name="108" href="#108">108</a>             {
<a name="109" href="#109">109</a>                 <em class="comment">// else check underlining object</em>
<a name="110" href="#110">110</a>                 object = LookupUtil.getBeanProperty(<strong>this</strong>.row.getObject(), <strong>this</strong>.header.getBeanPropertyName());
<a name="111" href="#111">111</a>             }
<a name="112" href="#112">112</a>         }
<a name="113" href="#113">113</a> 
<a name="114" href="#114">114</a>         <strong>if</strong> (decorated &amp;&amp; (<strong>this</strong>.header.getColumnDecorator() != <strong>null</strong>))
<a name="115" href="#115">115</a>         {
<a name="116" href="#116">116</a>             object = <strong>this</strong>.header.getColumnDecorator().decorate(object);
<a name="117" href="#117">117</a>         }
<a name="118" href="#118">118</a> 
<a name="119" href="#119">119</a>         <strong>if</strong> (object == <strong>null</strong> || object.equals(<span class="string">"null"</span>)) <em class="comment">//$NON-NLS-1$</em>
<a name="120" href="#120">120</a>         {
<a name="121" href="#121">121</a>             <strong>if</strong> (!<strong>this</strong>.header.getShowNulls())
<a name="122" href="#122">122</a>             {
<a name="123" href="#123">123</a>                 object = TagConstants.EMPTY_STRING;
<a name="124" href="#124">124</a>             }
<a name="125" href="#125">125</a>         }
<a name="126" href="#126">126</a> 
<a name="127" href="#127">127</a>         <strong>return</strong> object;
<a name="128" href="#128">128</a>     }
<a name="129" href="#129">129</a> 
<a name="130" href="#130">130</a>     <em>/**<em>*</em></em>
<a name="131" href="#131">131</a> <em>     * Generates the cell open tag.</em>
<a name="132" href="#132">132</a> <em>     * @return String td open tag</em>
<a name="133" href="#133">133</a> <em>     * @throws ObjectLookupException for errors in bean property lookup</em>
<a name="134" href="#134">134</a> <em>     * @throws DecoratorException if a column decorator is used and an exception is thrown during value decoration</em>
<a name="135" href="#135">135</a> <em>     */</em>
<a name="136" href="#136">136</a>     <strong>public</strong> String getOpenTag() throws ObjectLookupException, DecoratorException
<a name="137" href="#137">137</a>     {
<a name="138" href="#138">138</a>         <strong>this</strong>.stringValue = createChoppedAndLinkedValue();
<a name="139" href="#139">139</a> 
<a name="140" href="#140">140</a>         <strong>return</strong> HtmlTagUtil.createOpenTagString(TagConstants.TAGNAME_COLUMN, <strong>this</strong>.htmlAttributes);
<a name="141" href="#141">141</a>     }
<a name="142" href="#142">142</a> 
<a name="143" href="#143">143</a>     <em>/**<em>*</em></em>
<a name="144" href="#144">144</a> <em>     * Generates the cell close tag (&amp;lt;/td>).</em>
<a name="145" href="#145">145</a> <em>     * @return String td closing tag</em>
<a name="146" href="#146">146</a> <em>     */</em>
<a name="147" href="#147">147</a>     <strong>public</strong> String getCloseTag()
<a name="148" href="#148">148</a>     {
<a name="149" href="#149">149</a>         <strong>this</strong>.stringValue = <strong>null</strong>;
<a name="150" href="#150">150</a>         <strong>return</strong> <strong>this</strong>.header.getCloseTag();
<a name="151" href="#151">151</a>     }
<a name="152" href="#152">152</a> 
<a name="153" href="#153">153</a>     <em>/**<em>*</em></em>
<a name="154" href="#154">154</a> <em>     * Calculates the cell content, cropping or linking the value as needed.</em>
<a name="155" href="#155">155</a> <em>     * @return String</em>
<a name="156" href="#156">156</a> <em>     * @throws ObjectLookupException for errors in bean property lookup</em>
<a name="157" href="#157">157</a> <em>     * @throws DecoratorException if a column decorator is used and an exception is thrown during value decoration</em>
<a name="158" href="#158">158</a> <em>     */</em>
<a name="159" href="#159">159</a>     <strong>public</strong> String createChoppedAndLinkedValue() throws ObjectLookupException, DecoratorException
<a name="160" href="#160">160</a>     {
<a name="161" href="#161">161</a> 
<a name="162" href="#162">162</a>         String fullValue = ObjectUtils.toString(getValue(<strong>true</strong>));
<a name="163" href="#163">163</a>         String choppedValue;
<a name="164" href="#164">164</a> 
<a name="165" href="#165">165</a>         <em class="comment">// are we supposed to set up a link to the data being displayed in this column?</em>
<a name="166" href="#166">166</a>         <strong>if</strong> (<strong>this</strong>.header.getAutoLink())
<a name="167" href="#167">167</a>         {
<a name="168" href="#168">168</a>             fullValue = AutolinkColumnDecorator.INSTANCE.decorate(fullValue);
<a name="169" href="#169">169</a>         }
<a name="170" href="#170">170</a> 
<a name="171" href="#171">171</a>         <em class="comment">// trim the string if a maxLength or maxWords is defined</em>
<a name="172" href="#172">172</a>         <strong>if</strong> (<strong>this</strong>.header.getMaxLength() > 0)
<a name="173" href="#173">173</a>         {
<a name="174" href="#174">174</a>             choppedValue = HtmlTagUtil.abbreviateHtmlString(fullValue, <strong>this</strong>.header.getMaxLength(), false);
<a name="175" href="#175">175</a>         }
<a name="176" href="#176">176</a>         <strong>else</strong> <strong>if</strong> (<strong>this</strong>.header.getMaxWords() > 0)
<a name="177" href="#177">177</a>         {
<a name="178" href="#178">178</a>             choppedValue = HtmlTagUtil.abbreviateHtmlString(fullValue, <strong>this</strong>.header.getMaxWords(), <strong>true</strong>);
<a name="179" href="#179">179</a>         }
<a name="180" href="#180">180</a>         <strong>else</strong>
<a name="181" href="#181">181</a>         {
<a name="182" href="#182">182</a>             choppedValue = fullValue;
<a name="183" href="#183">183</a>         }
<a name="184" href="#184">184</a> 
<a name="185" href="#185">185</a>         <em class="comment">// chopped content? add the full content to the column "title" attribute</em>
<a name="186" href="#186">186</a>         <strong>if</strong> (choppedValue.length() &lt; fullValue.length())
<a name="187" href="#187">187</a>         {
<a name="188" href="#188">188</a>             <em class="comment">// clone the attribute map, don't want to add title to all the columns</em>
<a name="189" href="#189">189</a>             <strong>this</strong>.htmlAttributes = (HtmlAttributeMap) <strong>this</strong>.htmlAttributes.clone();
<a name="190" href="#190">190</a>             <em class="comment">// add title</em>
<a name="191" href="#191">191</a>             <strong>this</strong>.htmlAttributes.put(TagConstants.ATTRIBUTE_TITLE, HtmlTagUtil.stripHTMLTags(fullValue));
<a name="192" href="#192">192</a>         }
<a name="193" href="#193">193</a> 
<a name="194" href="#194">194</a>         <strong>if</strong> (<strong>this</strong>.header.getHref() != <strong>null</strong>)
<a name="195" href="#195">195</a>         {
<a name="196" href="#196">196</a>             <em class="comment">// generates the href for the link</em>
<a name="197" href="#197">197</a>             <a href="../../../org/displaytag/util/Href.html">Href</a> colHref = getColumnHref(fullValue);
<a name="198" href="#198">198</a>             <a href="../../../org/displaytag/util/Anchor.html">Anchor</a> anchor = <strong>new</strong> <a href="../../../org/displaytag/util/Anchor.html">Anchor</a>(colHref, choppedValue);
<a name="199" href="#199">199</a>             choppedValue = anchor.toString();
<a name="200" href="#200">200</a>         }
<a name="201" href="#201">201</a> 
<a name="202" href="#202">202</a>         <strong>return</strong> choppedValue;
<a name="203" href="#203">203</a>     }
<a name="204" href="#204">204</a> 
<a name="205" href="#205">205</a>     <em>/**<em>*</em></em>
<a name="206" href="#206">206</a> <em>     * Generates the href for the column using paramName/property/scope.</em>
<a name="207" href="#207">207</a> <em>     * @param columnContent column body</em>
<a name="208" href="#208">208</a> <em>     * @return generated Href</em>
<a name="209" href="#209">209</a> <em>     * @throws ObjectLookupException for errors in lookin up object properties</em>
<a name="210" href="#210">210</a> <em>     */</em>
<a name="211" href="#211">211</a>     <strong>private</strong> <a href="../../../org/displaytag/util/Href.html">Href</a> getColumnHref(String columnContent) throws ObjectLookupException
<a name="212" href="#212">212</a>     {
<a name="213" href="#213">213</a>         <em class="comment">// copy href</em>
<a name="214" href="#214">214</a>         <a href="../../../org/displaytag/util/Href.html">Href</a> colHref = <strong>new</strong> <a href="../../../org/displaytag/util/Href.html">Href</a>(<strong>this</strong>.header.getHref());
<a name="215" href="#215">215</a> 
<a name="216" href="#216">216</a>         <em class="comment">// do we need to add a param?</em>
<a name="217" href="#217">217</a>         <strong>if</strong> (<strong>this</strong>.header.getParamName() != <strong>null</strong>)
<a name="218" href="#218">218</a>         {
<a name="219" href="#219">219</a> 
<a name="220" href="#220">220</a>             Object paramValue;
<a name="221" href="#221">221</a> 
<a name="222" href="#222">222</a>             <strong>if</strong> (<strong>this</strong>.header.getParamProperty() != <strong>null</strong>)
<a name="223" href="#223">223</a>             {
<a name="224" href="#224">224</a>                 <em class="comment">// different property, go get it</em>
<a name="225" href="#225">225</a>                 paramValue = LookupUtil.getBeanProperty(<strong>this</strong>.row.getObject(), <strong>this</strong>.header.getParamProperty());
<a name="226" href="#226">226</a> 
<a name="227" href="#227">227</a>             }
<a name="228" href="#228">228</a>             <strong>else</strong>
<a name="229" href="#229">229</a>             {
<a name="230" href="#230">230</a>                 <em class="comment">// same property as content</em>
<a name="231" href="#231">231</a>                 paramValue = columnContent;
<a name="232" href="#232">232</a>             }
<a name="233" href="#233">233</a> 
<a name="234" href="#234">234</a>             <strong>if</strong> (paramValue != <strong>null</strong>)
<a name="235" href="#235">235</a>             {
<a name="236" href="#236">236</a>                 colHref.addParameter(<strong>this</strong>.header.getParamName(), CompatibleUrlEncoder.encode(
<a name="237" href="#237">237</a>                     paramValue.toString(),
<a name="238" href="#238">238</a>                     <strong>this</strong>.row.getParentTable().getEncoding()));
<a name="239" href="#239">239</a>             }
<a name="240" href="#240">240</a>         }
<a name="241" href="#241">241</a>         <strong>return</strong> colHref;
<a name="242" href="#242">242</a>     }
<a name="243" href="#243">243</a> 
<a name="244" href="#244">244</a>     <em>/**<em>*</em></em>
<a name="245" href="#245">245</a> <em>     * get the final value to be displayed in the table. This method can only be called after getOpenTag(), where the</em>
<a name="246" href="#246">246</a> <em>     * content is evaluated</em>
<a name="247" href="#247">247</a> <em>     * @return String final value to be displayed in the table</em>
<a name="248" href="#248">248</a> <em>     */</em>
<a name="249" href="#249">249</a>     <strong>public</strong> String getChoppedAndLinkedValue()
<a name="250" href="#250">250</a>     {
<a name="251" href="#251">251</a>         <strong>return</strong> <strong>this</strong>.stringValue;
<a name="252" href="#252">252</a>     }
<a name="253" href="#253">253</a> 
<a name="254" href="#254">254</a>     <em>/**<em>*</em></em>
<a name="255" href="#255">255</a> <em>     * returns the grouping order of this column or -1 if the column is not grouped.</em>
<a name="256" href="#256">256</a> <em>     * @return int grouping order of this column or -1 if the column is not grouped</em>
<a name="257" href="#257">257</a> <em>     */</em>
<a name="258" href="#258">258</a>     <strong>public</strong> <strong>int</strong> getGroup()
<a name="259" href="#259">259</a>     {
<a name="260" href="#260">260</a>         <strong>return</strong> <strong>this</strong>.header.getGroup();
<a name="261" href="#261">261</a>     }
<a name="262" href="#262">262</a> 
<a name="263" href="#263">263</a>     <em>/**<em>*</em></em>
<a name="264" href="#264">264</a> <em>     * @see java.lang.Object#toString()</em>
<a name="265" href="#265">265</a> <em>     */</em>
<a name="266" href="#266">266</a>     <strong>public</strong> String toString()
<a name="267" href="#267">267</a>     {
<a name="268" href="#268">268</a>         <strong>return</strong> <strong>new</strong> ToStringBuilder(<strong>this</strong>, ShortToStringStyle.SHORT_STYLE) <em class="comment">//</em>
<a name="269" href="#269">269</a>             .append(<span class="string">"cell"</span>, <strong>this</strong>.cell) <em class="comment">//$NON-NLS-1$</em>
<a name="270" href="#270">270</a>             .append(<span class="string">"header"</span>, <strong>this</strong>.header) <em class="comment">//$NON-NLS-1$</em>
<a name="271" href="#271">271</a>             .append(<span class="string">"htmlAttributes"</span>, <strong>this</strong>.htmlAttributes) <em class="comment">//$NON-NLS-1$</em>
<a name="272" href="#272">272</a>             .append(<span class="string">"stringValue"</span>, <strong>this</strong>.stringValue) <em class="comment">//$NON-NLS-1$</em>
<a name="273" href="#273">273</a>             .toString();
<a name="274" href="#274">274</a>     }
<a name="275" href="#275">275</a> }
</pre>
<hr/><div id="footer">This page was automatically generated by <a href="http://maven.apache.org/">Maven</a></div></body>
</html>

