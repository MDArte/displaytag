<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1" /><title>TableModel xref</title>
<link type="text/css" rel="stylesheet" href="../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../apidocs/org/displaytag/model/TableModel.html">View Javadoc</a></div><pre>

<a name="1" href="#1">1</a>   <em>/**<em>*</em></em>
<a name="2" href="#2">2</a>   <em> * Licensed under the Artistic License; you may not use this file</em>
<a name="3" href="#3">3</a>   <em> * except in compliance with the License.</em>
<a name="4" href="#4">4</a>   <em> * You may obtain a copy of the License at</em>
<a name="5" href="#5">5</a>   <em> *</em>
<a name="6" href="#6">6</a>   <em> *      <a href="http://displaytag.sourceforge.net/license.html" target="alexandria_uri">http://displaytag.sourceforge.net/license.html</a></em>
<a name="7" href="#7">7</a>   <em> *</em>
<a name="8" href="#8">8</a>   <em> * THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR</em>
<a name="9" href="#9">9</a>   <em> * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED</em>
<a name="10" href="#10">10</a>  <em> * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.</em>
<a name="11" href="#11">11</a>  <em> */</em>
<a name="12" href="#12">12</a>  <strong>package</strong> <a href="../../../org/displaytag/model/package-summary.html">org.displaytag.model</a>;
<a name="13" href="#13">13</a>  
<a name="14" href="#14">14</a>  <strong>import</strong> java.util.ArrayList;
<a name="15" href="#15">15</a>  <strong>import</strong> java.util.Collections;
<a name="16" href="#16">16</a>  <strong>import</strong> java.util.List;
<a name="17" href="#17">17</a>  
<a name="18" href="#18">18</a>  <strong>import</strong> org.apache.commons.lang.builder.ToStringBuilder;
<a name="19" href="#19">19</a>  <strong>import</strong> org.apache.commons.logging.Log;
<a name="20" href="#20">20</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;
<a name="21" href="#21">21</a>  <strong>import</strong> org.displaytag.decorator.TableDecorator;
<a name="22" href="#22">22</a>  <strong>import</strong> org.displaytag.properties.TableProperties;
<a name="23" href="#23">23</a>  <strong>import</strong> org.displaytag.util.ShortToStringStyle;
<a name="24" href="#24">24</a>  
<a name="25" href="#25">25</a>  
<a name="26" href="#26">26</a>  <em>/**<em>*</em></em>
<a name="27" href="#27">27</a>  <em> * Table Model. Holds table data for presentation.</em>
<a name="28" href="#28">28</a>  <em> * @author Fabrizio Giustina</em>
<a name="29" href="#29">29</a>  <em> * @version $Revision: 1.17 $ ($Author: fgiust $)</em>
<a name="30" href="#30">30</a>  <em> */</em>
<a name="31" href="#31">31</a>  <strong>public</strong> <strong>class</strong> <a href="../../../org/displaytag/model/TableModel.html">TableModel</a>
<a name="32" href="#32">32</a>  {
<a name="33" href="#33">33</a>  
<a name="34" href="#34">34</a>      <em>/**<em>*</em></em>
<a name="35" href="#35">35</a>  <em>     * logger.</em>
<a name="36" href="#36">36</a>  <em>     */</em>
<a name="37" href="#37">37</a>      <strong>private</strong> <strong>static</strong> Log log = LogFactory.getLog(TableModel.<strong>class</strong>);
<a name="38" href="#38">38</a>  
<a name="39" href="#39">39</a>      <em>/**<em>*</em></em>
<a name="40" href="#40">40</a>  <em>     * list of HeaderCell.</em>
<a name="41" href="#41">41</a>  <em>     */</em>
<a name="42" href="#42">42</a>      <strong>private</strong> List headerCellList;
<a name="43" href="#43">43</a>  
<a name="44" href="#44">44</a>      <em>/**<em>*</em></em>
<a name="45" href="#45">45</a>  <em>     * full list (contains Row objects).</em>
<a name="46" href="#46">46</a>  <em>     */</em>
<a name="47" href="#47">47</a>      <strong>private</strong> List rowListFull;
<a name="48" href="#48">48</a>  
<a name="49" href="#49">49</a>      <em>/**<em>*</em></em>
<a name="50" href="#50">50</a>  <em>     * list of data to be displayed in page.</em>
<a name="51" href="#51">51</a>  <em>     */</em>
<a name="52" href="#52">52</a>      <strong>private</strong> List rowListPage;
<a name="53" href="#53">53</a>  
<a name="54" href="#54">54</a>      <em>/**<em>*</em></em>
<a name="55" href="#55">55</a>  <em>     * sort order = ascending?</em>
<a name="56" href="#56">56</a>  <em>     */</em>
<a name="57" href="#57">57</a>      <strong>private</strong> <strong>boolean</strong> sortOrderAscending = <strong>true</strong>;
<a name="58" href="#58">58</a>  
<a name="59" href="#59">59</a>      <em>/**<em>*</em></em>
<a name="60" href="#60">60</a>  <em>     * sort full List? (false sort only displayed page).</em>
<a name="61" href="#61">61</a>  <em>     */</em>
<a name="62" href="#62">62</a>      <strong>private</strong> <strong>boolean</strong> sortFullTable = <strong>true</strong>;
<a name="63" href="#63">63</a>  
<a name="64" href="#64">64</a>      <em>/**<em>*</em></em>
<a name="65" href="#65">65</a>  <em>     * index of the sorted column (-1 if the table is not sorted).</em>
<a name="66" href="#66">66</a>  <em>     */</em>
<a name="67" href="#67">67</a>      <strong>private</strong> <strong>int</strong> sortedColumn = -1;
<a name="68" href="#68">68</a>  
<a name="69" href="#69">69</a>      <em>/**<em>*</em></em>
<a name="70" href="#70">70</a>  <em>     * Table decorator.</em>
<a name="71" href="#71">71</a>  <em>     */</em>
<a name="72" href="#72">72</a>      <strong>private</strong> <a href="../../../org/displaytag/decorator/TableDecorator.html">TableDecorator</a> tableDecorator;
<a name="73" href="#73">73</a>  
<a name="74" href="#74">74</a>      <em>/**<em>*</em></em>
<a name="75" href="#75">75</a>  <em>     * id inherited from the TableTag (needed only for logging).</em>
<a name="76" href="#76">76</a>  <em>     */</em>
<a name="77" href="#77">77</a>      <strong>private</strong> String id;
<a name="78" href="#78">78</a>  
<a name="79" href="#79">79</a>      <em>/**<em>*</em></em>
<a name="80" href="#80">80</a>  <em>     * configurable table properties.</em>
<a name="81" href="#81">81</a>  <em>     */</em>
<a name="82" href="#82">82</a>      <strong>private</strong> <a href="../../../org/displaytag/properties/TableProperties.html">TableProperties</a> properties;
<a name="83" href="#83">83</a>  
<a name="84" href="#84">84</a>      <em>/**<em>*</em></em>
<a name="85" href="#85">85</a>  <em>     * Starting offset for elements in the viewable list.</em>
<a name="86" href="#86">86</a>  <em>     */</em>
<a name="87" href="#87">87</a>      <strong>private</strong> <strong>int</strong> pageOffset;
<a name="88" href="#88">88</a>  
<a name="89" href="#89">89</a>      <em>/**<em>*</em></em>
<a name="90" href="#90">90</a>  <em>     * Response encoding.</em>
<a name="91" href="#91">91</a>  <em>     */</em>
<a name="92" href="#92">92</a>      <strong>private</strong> String encoding;
<a name="93" href="#93">93</a>  
<a name="94" href="#94">94</a>      <em>/**<em>*</em></em>
<a name="95" href="#95">95</a>  <em>     * Constructor for TableModel.</em>
<a name="96" href="#96">96</a>  <em>     * @param tableProperties table properties</em>
<a name="97" href="#97">97</a>  <em>     * @param charEncoding response encoding</em>
<a name="98" href="#98">98</a>  <em>     */</em>
<a name="99" href="#99">99</a>      <strong>public</strong> <a href="../../../org/displaytag/model/TableModel.html">TableModel</a>(<a href="../../../org/displaytag/properties/TableProperties.html">TableProperties</a> tableProperties, String charEncoding)
<a name="100" href="#100">100</a>     {
<a name="101" href="#101">101</a>         <strong>this</strong>.rowListFull = <strong>new</strong> ArrayList(20);
<a name="102" href="#102">102</a>         <strong>this</strong>.headerCellList = <strong>new</strong> ArrayList(20);
<a name="103" href="#103">103</a>         <strong>this</strong>.properties = tableProperties;
<a name="104" href="#104">104</a>         <strong>this</strong>.encoding = charEncoding;
<a name="105" href="#105">105</a>     }
<a name="106" href="#106">106</a> 
<a name="107" href="#107">107</a>     <em>/**<em>*</em></em>
<a name="108" href="#108">108</a> <em>     * Sets the starting offset for elements in the viewable list.</em>
<a name="109" href="#109">109</a> <em>     * @param offset The page offset to set.</em>
<a name="110" href="#110">110</a> <em>     */</em>
<a name="111" href="#111">111</a>     <strong>public</strong> <strong>void</strong> setPageOffset(<strong>int</strong> offset)
<a name="112" href="#112">112</a>     {
<a name="113" href="#113">113</a>         <strong>this</strong>.pageOffset = offset;
<a name="114" href="#114">114</a>     }
<a name="115" href="#115">115</a> 
<a name="116" href="#116">116</a>     <em>/**<em>*</em></em>
<a name="117" href="#117">117</a> <em>     * Setter for the tablemodel id.</em>
<a name="118" href="#118">118</a> <em>     * @param tableId same id of table tag, needed for logging</em>
<a name="119" href="#119">119</a> <em>     */</em>
<a name="120" href="#120">120</a>     <strong>public</strong> <strong>void</strong> setId(String tableId)
<a name="121" href="#121">121</a>     {
<a name="122" href="#122">122</a>         <strong>this</strong>.id = tableId;
<a name="123" href="#123">123</a>     }
<a name="124" href="#124">124</a> 
<a name="125" href="#125">125</a>     <em>/**<em>*</em></em>
<a name="126" href="#126">126</a> <em>     * get the full list.</em>
<a name="127" href="#127">127</a> <em>     * @return the full list containing Row objects</em>
<a name="128" href="#128">128</a> <em>     */</em>
<a name="129" href="#129">129</a>     <strong>public</strong> List getRowListFull()
<a name="130" href="#130">130</a>     {
<a name="131" href="#131">131</a>         <strong>return</strong> <strong>this</strong>.rowListFull;
<a name="132" href="#132">132</a>     }
<a name="133" href="#133">133</a> 
<a name="134" href="#134">134</a>     <em>/**<em>*</em></em>
<a name="135" href="#135">135</a> <em>     * gets the partial (paginated) list.</em>
<a name="136" href="#136">136</a> <em>     * @return the partial list to display in page (contains Row objects)</em>
<a name="137" href="#137">137</a> <em>     */</em>
<a name="138" href="#138">138</a>     <strong>public</strong> List getRowListPage()
<a name="139" href="#139">139</a>     {
<a name="140" href="#140">140</a>         <strong>return</strong> <strong>this</strong>.rowListPage;
<a name="141" href="#141">141</a>     }
<a name="142" href="#142">142</a> 
<a name="143" href="#143">143</a>     <em>/**<em>*</em></em>
<a name="144" href="#144">144</a> <em>     * adds a Row object to the table.</em>
<a name="145" href="#145">145</a> <em>     * @param row Row</em>
<a name="146" href="#146">146</a> <em>     */</em>
<a name="147" href="#147">147</a>     <strong>public</strong> <strong>void</strong> addRow(<a href="../../../org/displaytag/model/Row.html">Row</a> row)
<a name="148" href="#148">148</a>     {
<a name="149" href="#149">149</a>         row.setParentTable(<strong>this</strong>);
<a name="150" href="#150">150</a> 
<a name="151" href="#151">151</a>         <strong>if</strong> (log.isDebugEnabled())
<a name="152" href="#152">152</a>         {
<a name="153" href="#153">153</a>             log.debug(<span class="string">"["</span> + <strong>this</strong>.id + <span class="string">"] adding row "</span> + row);
<a name="154" href="#154">154</a>         }
<a name="155" href="#155">155</a>         <strong>this</strong>.rowListFull.add(row);
<a name="156" href="#156">156</a>     }
<a name="157" href="#157">157</a> 
<a name="158" href="#158">158</a>     <em>/**<em>*</em></em>
<a name="159" href="#159">159</a> <em>     * sets the sort full table property. If true the full list is sorted, if false sorting is applied only to the</em>
<a name="160" href="#160">160</a> <em>     * displayed sublist.</em>
<a name="161" href="#161">161</a> <em>     * @param sortFull boolean</em>
<a name="162" href="#162">162</a> <em>     */</em>
<a name="163" href="#163">163</a>     <strong>public</strong> <strong>void</strong> setSortFullTable(<strong>boolean</strong> sortFull)
<a name="164" href="#164">164</a>     {
<a name="165" href="#165">165</a>         <strong>this</strong>.sortFullTable = sortFull;
<a name="166" href="#166">166</a>     }
<a name="167" href="#167">167</a> 
<a name="168" href="#168">168</a>     <em>/**<em>*</em></em>
<a name="169" href="#169">169</a> <em>     * return the sort full table property.</em>
<a name="170" href="#170">170</a> <em>     * @return boolean true if sorting is applied to the full list</em>
<a name="171" href="#171">171</a> <em>     */</em>
<a name="172" href="#172">172</a>     <strong>public</strong> <strong>boolean</strong> isSortFullTable()
<a name="173" href="#173">173</a>     {
<a name="174" href="#174">174</a>         <strong>return</strong> <strong>this</strong>.sortFullTable;
<a name="175" href="#175">175</a>     }
<a name="176" href="#176">176</a> 
<a name="177" href="#177">177</a>     <em>/**<em>*</em></em>
<a name="178" href="#178">178</a> <em>     * return the sort order of the page.</em>
<a name="179" href="#179">179</a> <em>     * @return true if sort order is ascending</em>
<a name="180" href="#180">180</a> <em>     */</em>
<a name="181" href="#181">181</a>     <strong>public</strong> <strong>boolean</strong> isSortOrderAscending()
<a name="182" href="#182">182</a>     {
<a name="183" href="#183">183</a>         <strong>return</strong> <strong>this</strong>.sortOrderAscending;
<a name="184" href="#184">184</a> 
<a name="185" href="#185">185</a>     }
<a name="186" href="#186">186</a> 
<a name="187" href="#187">187</a>     <em>/**<em>*</em></em>
<a name="188" href="#188">188</a> <em>     * set the sort order of the list.</em>
<a name="189" href="#189">189</a> <em>     * @param isSortOrderAscending true to sort in ascending order</em>
<a name="190" href="#190">190</a> <em>     */</em>
<a name="191" href="#191">191</a>     <strong>public</strong> <strong>void</strong> setSortOrderAscending(<strong>boolean</strong> isSortOrderAscending)
<a name="192" href="#192">192</a>     {
<a name="193" href="#193">193</a>         <strong>this</strong>.sortOrderAscending = isSortOrderAscending;
<a name="194" href="#194">194</a>     }
<a name="195" href="#195">195</a> 
<a name="196" href="#196">196</a>     <em>/**<em>*</em></em>
<a name="197" href="#197">197</a> <em>     * @param rowList - the new value for this.rowListPage</em>
<a name="198" href="#198">198</a> <em>     */</em>
<a name="199" href="#199">199</a>     <strong>public</strong> <strong>void</strong> setRowListPage(List rowList)
<a name="200" href="#200">200</a>     {
<a name="201" href="#201">201</a>         <strong>this</strong>.rowListPage = rowList;
<a name="202" href="#202">202</a>     }
<a name="203" href="#203">203</a> 
<a name="204" href="#204">204</a>     <em>/**<em>*</em></em>
<a name="205" href="#205">205</a> <em>     * getter for the Table Decorator.</em>
<a name="206" href="#206">206</a> <em>     * @return TableDecorator</em>
<a name="207" href="#207">207</a> <em>     */</em>
<a name="208" href="#208">208</a>     <strong>public</strong> <a href="../../../org/displaytag/decorator/TableDecorator.html">TableDecorator</a> getTableDecorator()
<a name="209" href="#209">209</a>     {
<a name="210" href="#210">210</a>         <strong>return</strong> <strong>this</strong>.tableDecorator;
<a name="211" href="#211">211</a>     }
<a name="212" href="#212">212</a> 
<a name="213" href="#213">213</a>     <em>/**<em>*</em></em>
<a name="214" href="#214">214</a> <em>     * setter for the table decorator.</em>
<a name="215" href="#215">215</a> <em>     * @param decorator - the TableDecorator object</em>
<a name="216" href="#216">216</a> <em>     */</em>
<a name="217" href="#217">217</a>     <strong>public</strong> <strong>void</strong> setTableDecorator(<a href="../../../org/displaytag/decorator/TableDecorator.html">TableDecorator</a> decorator)
<a name="218" href="#218">218</a>     {
<a name="219" href="#219">219</a>         <strong>this</strong>.tableDecorator = decorator;
<a name="220" href="#220">220</a>     }
<a name="221" href="#221">221</a> 
<a name="222" href="#222">222</a>     <em>/**<em>*</em></em>
<a name="223" href="#223">223</a> <em>     * returns true if the table is sorted.</em>
<a name="224" href="#224">224</a> <em>     * @return boolean true if the table is sorted</em>
<a name="225" href="#225">225</a> <em>     */</em>
<a name="226" href="#226">226</a>     <strong>public</strong> <strong>boolean</strong> isSorted()
<a name="227" href="#227">227</a>     {
<a name="228" href="#228">228</a>         <strong>return</strong> <strong>this</strong>.sortedColumn != -1;
<a name="229" href="#229">229</a>     }
<a name="230" href="#230">230</a> 
<a name="231" href="#231">231</a>     <em>/**<em>*</em></em>
<a name="232" href="#232">232</a> <em>     * returns the HeaderCell for the sorted column.</em>
<a name="233" href="#233">233</a> <em>     * @return HeaderCell</em>
<a name="234" href="#234">234</a> <em>     */</em>
<a name="235" href="#235">235</a>     <strong>public</strong> <a href="../../../org/displaytag/model/HeaderCell.html">HeaderCell</a> getSortedColumnHeader()
<a name="236" href="#236">236</a>     {
<a name="237" href="#237">237</a>         <strong>if</strong> (<strong>this</strong>.sortedColumn &lt; 0 || (<strong>this</strong>.sortedColumn > (<strong>this</strong>.headerCellList.size() - 1)))
<a name="238" href="#238">238</a>         {
<a name="239" href="#239">239</a>             <strong>return</strong> <strong>null</strong>;
<a name="240" href="#240">240</a>         }
<a name="241" href="#241">241</a>         <strong>return</strong> (HeaderCell) <strong>this</strong>.headerCellList.get(<strong>this</strong>.sortedColumn);
<a name="242" href="#242">242</a>     }
<a name="243" href="#243">243</a> 
<a name="244" href="#244">244</a>     <em>/**<em>*</em></em>
<a name="245" href="#245">245</a> <em>     * return the number of columns in the table.</em>
<a name="246" href="#246">246</a> <em>     * @return int number of columns</em>
<a name="247" href="#247">247</a> <em>     */</em>
<a name="248" href="#248">248</a>     <strong>public</strong> <strong>int</strong> getNumberOfColumns()
<a name="249" href="#249">249</a>     {
<a name="250" href="#250">250</a>         <strong>return</strong> <strong>this</strong>.headerCellList.size();
<a name="251" href="#251">251</a>     }
<a name="252" href="#252">252</a> 
<a name="253" href="#253">253</a>     <em>/**<em>*</em></em>
<a name="254" href="#254">254</a> <em>     * return true is the table has no columns.</em>
<a name="255" href="#255">255</a> <em>     * @return boolean</em>
<a name="256" href="#256">256</a> <em>     */</em>
<a name="257" href="#257">257</a>     <strong>public</strong> <strong>boolean</strong> isEmpty()
<a name="258" href="#258">258</a>     {
<a name="259" href="#259">259</a>         <strong>return</strong> <strong>this</strong>.headerCellList.size() == 0;
<a name="260" href="#260">260</a>     }
<a name="261" href="#261">261</a> 
<a name="262" href="#262">262</a>     <em>/**<em>*</em></em>
<a name="263" href="#263">263</a> <em>     * return the index of the sorted column.</em>
<a name="264" href="#264">264</a> <em>     * @return index of the sorted column or -1 if the table is not sorted</em>
<a name="265" href="#265">265</a> <em>     */</em>
<a name="266" href="#266">266</a>     <strong>public</strong> <strong>int</strong> getSortedColumnNumber()
<a name="267" href="#267">267</a>     {
<a name="268" href="#268">268</a>         <strong>return</strong> <strong>this</strong>.sortedColumn;
<a name="269" href="#269">269</a>     }
<a name="270" href="#270">270</a> 
<a name="271" href="#271">271</a>     <em>/**<em>*</em></em>
<a name="272" href="#272">272</a> <em>     * set the sorted column index.</em>
<a name="273" href="#273">273</a> <em>     * @param sortIndex - the index of the sorted column</em>
<a name="274" href="#274">274</a> <em>     */</em>
<a name="275" href="#275">275</a>     <strong>public</strong> <strong>void</strong> setSortedColumnNumber(<strong>int</strong> sortIndex)
<a name="276" href="#276">276</a>     {
<a name="277" href="#277">277</a>         <strong>this</strong>.sortedColumn = sortIndex;
<a name="278" href="#278">278</a>     }
<a name="279" href="#279">279</a> 
<a name="280" href="#280">280</a>     <em>/**<em>*</em></em>
<a name="281" href="#281">281</a> <em>     * Adds a column header (HeaderCell object).</em>
<a name="282" href="#282">282</a> <em>     * @param headerCell HeaderCell</em>
<a name="283" href="#283">283</a> <em>     */</em>
<a name="284" href="#284">284</a>     <strong>public</strong> <strong>void</strong> addColumnHeader(<a href="../../../org/displaytag/model/HeaderCell.html">HeaderCell</a> headerCell)
<a name="285" href="#285">285</a>     {
<a name="286" href="#286">286</a>         <strong>if</strong> (<strong>this</strong>.sortedColumn == <strong>this</strong>.headerCellList.size())
<a name="287" href="#287">287</a>         {
<a name="288" href="#288">288</a>             headerCell.setAlreadySorted();
<a name="289" href="#289">289</a>         }
<a name="290" href="#290">290</a>         headerCell.setColumnNumber(<strong>this</strong>.headerCellList.size());
<a name="291" href="#291">291</a> 
<a name="292" href="#292">292</a>         <strong>this</strong>.headerCellList.add(headerCell);
<a name="293" href="#293">293</a>     }
<a name="294" href="#294">294</a> 
<a name="295" href="#295">295</a>     <em>/**<em>*</em></em>
<a name="296" href="#296">296</a> <em>     * List containing headerCell objects.</em>
<a name="297" href="#297">297</a> <em>     * @return List containing headerCell objects</em>
<a name="298" href="#298">298</a> <em>     */</em>
<a name="299" href="#299">299</a>     <strong>public</strong> List getHeaderCellList()
<a name="300" href="#300">300</a>     {
<a name="301" href="#301">301</a>         <strong>return</strong> <strong>this</strong>.headerCellList;
<a name="302" href="#302">302</a>     }
<a name="303" href="#303">303</a> 
<a name="304" href="#304">304</a>     <em>/**<em>*</em></em>
<a name="305" href="#305">305</a> <em>     * returns a RowIterator on the requested (full|page) list.</em>
<a name="306" href="#306">306</a> <em>     * @return RowIterator</em>
<a name="307" href="#307">307</a> <em>     * @param full if &lt;code>true&lt;/code> returns an iterator on te full list, if &lt;code>false&lt;/code> only on the</em>
<a name="308" href="#308">308</a> <em>     * viewable part.</em>
<a name="309" href="#309">309</a> <em>     * @see org.displaytag.model.RowIterator</em>
<a name="310" href="#310">310</a> <em>     */</em>
<a name="311" href="#311">311</a>     <strong>public</strong> <a href="../../../org/displaytag/model/RowIterator.html">RowIterator</a> getRowIterator(<strong>boolean</strong> full)
<a name="312" href="#312">312</a>     {
<a name="313" href="#313">313</a>         <a href="../../../org/displaytag/model/RowIterator.html">RowIterator</a> iterator = <strong>new</strong> <a href="../../../org/displaytag/model/RowIterator.html">RowIterator</a>(
<a name="314" href="#314">314</a>             full ? <strong>this</strong>.rowListFull : <strong>this</strong>.rowListPage,
<a name="315" href="#315">315</a>             <strong>this</strong>.headerCellList,
<a name="316" href="#316">316</a>             <strong>this</strong>.tableDecorator,
<a name="317" href="#317">317</a>             <strong>this</strong>.pageOffset);
<a name="318" href="#318">318</a>         <em class="comment">// copy id for logging</em>
<a name="319" href="#319">319</a>         iterator.setId(<strong>this</strong>.id);
<a name="320" href="#320">320</a>         <strong>return</strong> iterator;
<a name="321" href="#321">321</a>     }
<a name="322" href="#322">322</a> 
<a name="323" href="#323">323</a>     <em>/**<em>*</em></em>
<a name="324" href="#324">324</a> <em>     * sorts the given list of Rows. The method is called internally by sortFullList() and sortPageList().</em>
<a name="325" href="#325">325</a> <em>     * @param list List</em>
<a name="326" href="#326">326</a> <em>     */</em>
<a name="327" href="#327">327</a>     <strong>private</strong> <strong>void</strong> sortRowList(List list)
<a name="328" href="#328">328</a>     {
<a name="329" href="#329">329</a>         <strong>if</strong> (isSorted())
<a name="330" href="#330">330</a>         {
<a name="331" href="#331">331</a>             <a href="../../../org/displaytag/model/HeaderCell.html">HeaderCell</a> sortedHeaderCell = getSortedColumnHeader();
<a name="332" href="#332">332</a> 
<a name="333" href="#333">333</a>             <strong>if</strong> (sortedHeaderCell != <strong>null</strong>)
<a name="334" href="#334">334</a>             {
<a name="335" href="#335">335</a>                 <em class="comment">// If it is an explicit value, then sort by that, otherwise sort by the property...</em>
<a name="336" href="#336">336</a>                 <strong>if</strong> (sortedHeaderCell.getBeanPropertyName() != <strong>null</strong>
<a name="337" href="#337">337</a>                     || (<strong>this</strong>.sortedColumn != -1 &amp;&amp; <strong>this</strong>.sortedColumn &lt; <strong>this</strong>.headerCellList.size()))
<a name="338" href="#338">338</a>                 {
<a name="339" href="#339">339</a>                     <strong>if</strong> (sortedHeaderCell.getSortProperty() != <strong>null</strong>)
<a name="340" href="#340">340</a>                     {
<a name="341" href="#341">341</a>                         Collections.sort(list, <strong>new</strong> <a href="../../../org/displaytag/model/RowSorter.html">RowSorter</a>(
<a name="342" href="#342">342</a>                             <strong>this</strong>.sortedColumn,
<a name="343" href="#343">343</a>                             sortedHeaderCell.getSortProperty(),
<a name="344" href="#344">344</a>                             getTableDecorator(),
<a name="345" href="#345">345</a>                             <strong>this</strong>.sortOrderAscending));
<a name="346" href="#346">346</a>                     }
<a name="347" href="#347">347</a>                     <strong>else</strong>
<a name="348" href="#348">348</a>                     {
<a name="349" href="#349">349</a>                         Collections.sort(list, <strong>new</strong> <a href="../../../org/displaytag/model/RowSorter.html">RowSorter</a>(
<a name="350" href="#350">350</a>                             <strong>this</strong>.sortedColumn,
<a name="351" href="#351">351</a>                             sortedHeaderCell.getBeanPropertyName(),
<a name="352" href="#352">352</a>                             getTableDecorator(),
<a name="353" href="#353">353</a>                             <strong>this</strong>.sortOrderAscending));
<a name="354" href="#354">354</a>                     }
<a name="355" href="#355">355</a>                 }
<a name="356" href="#356">356</a>             }
<a name="357" href="#357">357</a> 
<a name="358" href="#358">358</a>         }
<a name="359" href="#359">359</a> 
<a name="360" href="#360">360</a>     }
<a name="361" href="#361">361</a> 
<a name="362" href="#362">362</a>     <em>/**<em>*</em></em>
<a name="363" href="#363">363</a> <em>     * sort the list displayed in page.</em>
<a name="364" href="#364">364</a> <em>     */</em>
<a name="365" href="#365">365</a>     <strong>public</strong> <strong>void</strong> sortPageList()
<a name="366" href="#366">366</a>     {
<a name="367" href="#367">367</a>         <strong>if</strong> (log.isDebugEnabled())
<a name="368" href="#368">368</a>         {
<a name="369" href="#369">369</a>             log.debug(<span class="string">"["</span> + <strong>this</strong>.id + <span class="string">"] sorting page list"</span>);
<a name="370" href="#370">370</a>         }
<a name="371" href="#371">371</a>         sortRowList(<strong>this</strong>.rowListPage);
<a name="372" href="#372">372</a> 
<a name="373" href="#373">373</a>     }
<a name="374" href="#374">374</a> 
<a name="375" href="#375">375</a>     <em>/**<em>*</em></em>
<a name="376" href="#376">376</a> <em>     * sort the full list of data.</em>
<a name="377" href="#377">377</a> <em>     */</em>
<a name="378" href="#378">378</a>     <strong>public</strong> <strong>void</strong> sortFullList()
<a name="379" href="#379">379</a>     {
<a name="380" href="#380">380</a>         <strong>if</strong> (log.isDebugEnabled())
<a name="381" href="#381">381</a>         {
<a name="382" href="#382">382</a>             log.debug(<span class="string">"["</span> + <strong>this</strong>.id + <span class="string">"] sorting full data"</span>);
<a name="383" href="#383">383</a>         }
<a name="384" href="#384">384</a>         sortRowList(<strong>this</strong>.rowListFull);
<a name="385" href="#385">385</a>     }
<a name="386" href="#386">386</a> 
<a name="387" href="#387">387</a>     <em>/**<em>*</em></em>
<a name="388" href="#388">388</a> <em>     * Returns the table properties.</em>
<a name="389" href="#389">389</a> <em>     * @return the configured table properties.</em>
<a name="390" href="#390">390</a> <em>     */</em>
<a name="391" href="#391">391</a>     <strong>public</strong> <a href="../../../org/displaytag/properties/TableProperties.html">TableProperties</a> getProperties()
<a name="392" href="#392">392</a>     {
<a name="393" href="#393">393</a>         <strong>return</strong> <strong>this</strong>.properties;
<a name="394" href="#394">394</a>     }
<a name="395" href="#395">395</a> 
<a name="396" href="#396">396</a>     <em>/**<em>*</em></em>
<a name="397" href="#397">397</a> <em>     * Getter for character encoding.</em>
<a name="398" href="#398">398</a> <em>     * @return Returns the encoding used for response.</em>
<a name="399" href="#399">399</a> <em>     */</em>
<a name="400" href="#400">400</a>     <strong>public</strong> String getEncoding()
<a name="401" href="#401">401</a>     {
<a name="402" href="#402">402</a>         <strong>return</strong> encoding;
<a name="403" href="#403">403</a>     }
<a name="404" href="#404">404</a> 
<a name="405" href="#405">405</a>     <em>/**<em>*</em></em>
<a name="406" href="#406">406</a> <em>     * @see java.lang.Object#toString()</em>
<a name="407" href="#407">407</a> <em>     */</em>
<a name="408" href="#408">408</a>     <strong>public</strong> String toString()
<a name="409" href="#409">409</a>     {
<a name="410" href="#410">410</a>         <strong>return</strong> <strong>new</strong> ToStringBuilder(<strong>this</strong>, ShortToStringStyle.SHORT_STYLE) <em class="comment">//</em>
<a name="411" href="#411">411</a>             .append(<span class="string">"rowListFull"</span>, <strong>this</strong>.rowListFull) <em class="comment">//$NON-NLS-1$</em>
<a name="412" href="#412">412</a>             .append(<span class="string">"rowListPage"</span>, <strong>this</strong>.rowListPage) <em class="comment">//$NON-NLS-1$</em>
<a name="413" href="#413">413</a>             .append(<span class="string">"properties"</span>, <strong>this</strong>.properties) <em class="comment">//$NON-NLS-1$</em>
<a name="414" href="#414">414</a>             .append(<span class="string">"empty"</span>, <strong>this</strong>.isEmpty()) <em class="comment">//$NON-NLS-1$</em>
<a name="415" href="#415">415</a>             .append(<span class="string">"encoding"</span>, <strong>this</strong>.encoding) <em class="comment">//$NON-NLS-1$</em>
<a name="416" href="#416">416</a>             .append(<span class="string">"numberOfColumns"</span>, <strong>this</strong>.getNumberOfColumns()) <em class="comment">//$NON-NLS-1$</em>
<a name="417" href="#417">417</a>             .append(<span class="string">"headerCellList"</span>, <strong>this</strong>.headerCellList) <em class="comment">//$NON-NLS-1$</em>
<a name="418" href="#418">418</a>             .append(<span class="string">"sortFullTable"</span>, <strong>this</strong>.sortFullTable) <em class="comment">//$NON-NLS-1$</em>
<a name="419" href="#419">419</a>             .append(<span class="string">"sortedColumnNumber"</span>, <strong>this</strong>.getSortedColumnNumber()) <em class="comment">//$NON-NLS-1$</em>
<a name="420" href="#420">420</a>             .append(<span class="string">"sortOrderAscending"</span>, <strong>this</strong>.sortOrderAscending) <em class="comment">//$NON-NLS-1$</em>
<a name="421" href="#421">421</a>             .append(<span class="string">"sortedColumnHeader"</span>, <strong>this</strong>.getSortedColumnHeader()) <em class="comment">//$NON-NLS-1$</em>
<a name="422" href="#422">422</a>             .append(<span class="string">"sorted"</span>, <strong>this</strong>.isSorted()) <em class="comment">//$NON-NLS-1$</em>
<a name="423" href="#423">423</a>             .append(<span class="string">"tableDecorator"</span>, <strong>this</strong>.tableDecorator) <em class="comment">//$NON-NLS-1$</em>
<a name="424" href="#424">424</a>             .toString();
<a name="425" href="#425">425</a>     }
<a name="426" href="#426">426</a> }
</pre>
<hr/><div id="footer">This page was automatically generated by <a href="http://maven.apache.org/">Maven</a></div></body>
</html>

