<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1" /><title>TestList xref</title>
<link type="text/css" rel="stylesheet" href="../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../apidocs/org/displaytag/sample/TestList.html">View Javadoc</a></div><pre>

<a name="1" href="#1">1</a>   <em>/**<em>*</em></em>
<a name="2" href="#2">2</a>   <em> * Licensed under the Artistic License; you may not use this file</em>
<a name="3" href="#3">3</a>   <em> * except in compliance with the License.</em>
<a name="4" href="#4">4</a>   <em> * You may obtain a copy of the License at</em>
<a name="5" href="#5">5</a>   <em> *</em>
<a name="6" href="#6">6</a>   <em> *      <a href="http://displaytag.sourceforge.net/license.html" target="alexandria_uri">http://displaytag.sourceforge.net/license.html</a></em>
<a name="7" href="#7">7</a>   <em> *</em>
<a name="8" href="#8">8</a>   <em> * THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR</em>
<a name="9" href="#9">9</a>   <em> * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED</em>
<a name="10" href="#10">10</a>  <em> * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.</em>
<a name="11" href="#11">11</a>  <em> */</em>
<a name="12" href="#12">12</a>  <strong>package</strong> <a href="../../../org/displaytag/sample/package-summary.html">org.displaytag.sample</a>;
<a name="13" href="#13">13</a>  
<a name="14" href="#14">14</a>  <strong>import</strong> java.util.ArrayList;
<a name="15" href="#15">15</a>  <strong>import</strong> java.util.Random;
<a name="16" href="#16">16</a>  
<a name="17" href="#17">17</a>  
<a name="18" href="#18">18</a>  <em>/**<em>*</em></em>
<a name="19" href="#19">19</a>  <em> * Just a utility class for testing out the table and column tags. When this class is created, it loads itself with a</em>
<a name="20" href="#20">20</a>  <em> * number of ListObjects that are shown throughout the various example pages that exercise the table object. If created</em>
<a name="21" href="#21">21</a>  <em> * via the default constructor, this loads itself with 60 ListObjects.</em>
<a name="22" href="#22">22</a>  <em> * @author epesh</em>
<a name="23" href="#23">23</a>  <em> * @author Fabrizio Giustina</em>
<a name="24" href="#24">24</a>  <em> * @version $Revision: 1.10 $ ($Author: fgiust $)</em>
<a name="25" href="#25">25</a>  <em> */</em>
<a name="26" href="#26">26</a>  <strong>public</strong> <strong>class</strong> <a href="../../../org/displaytag/sample/TestList.html">TestList</a> <strong>extends</strong> ArrayList
<a name="27" href="#27">27</a>  {
<a name="28" href="#28">28</a>  
<a name="29" href="#29">29</a>      <em>/**<em>*</em></em>
<a name="30" href="#30">30</a>  <em>     * D1597A17A6.</em>
<a name="31" href="#31">31</a>  <em>     */</em>
<a name="32" href="#32">32</a>      <strong>private</strong> <strong>static</strong> <strong>final</strong> <strong>long</strong> serialVersionUID = 899149338534L;
<a name="33" href="#33">33</a>  
<a name="34" href="#34">34</a>      <em>/**<em>*</em></em>
<a name="35" href="#35">35</a>  <em>     * Creats a TestList that is filled with 60 ListObjects suitable for testing.</em>
<a name="36" href="#36">36</a>  <em>     */</em>
<a name="37" href="#37">37</a>      <strong>public</strong> <a href="../../../org/displaytag/sample/TestList.html">TestList</a>()
<a name="38" href="#38">38</a>      {
<a name="39" href="#39">39</a>          <strong>super</strong>();
<a name="40" href="#40">40</a>  
<a name="41" href="#41">41</a>          <strong>for</strong> (<strong>int</strong> j = 0; j &lt; 60; j++)
<a name="42" href="#42">42</a>          {
<a name="43" href="#43">43</a>              add(<strong>new</strong> <a href="../../../org/displaytag/sample/ListObject.html">ListObject</a>());
<a name="44" href="#44">44</a>          }
<a name="45" href="#45">45</a>      }
<a name="46" href="#46">46</a>  
<a name="47" href="#47">47</a>      <em>/**<em>*</em></em>
<a name="48" href="#48">48</a>  <em>     * Creates a TestList that is filled with [size] ListObjects suitable for testing.</em>
<a name="49" href="#49">49</a>  <em>     * @param size int size of the list</em>
<a name="50" href="#50">50</a>  <em>     * @param duplicates boolean put duplicates in the list</em>
<a name="51" href="#51">51</a>  <em>     */</em>
<a name="52" href="#52">52</a>      <strong>public</strong> <a href="../../../org/displaytag/sample/TestList.html">TestList</a>(<strong>int</strong> size, <strong>boolean</strong> duplicates)
<a name="53" href="#53">53</a>      {
<a name="54" href="#54">54</a>          <strong>if</strong> (duplicates)
<a name="55" href="#55">55</a>          {
<a name="56" href="#56">56</a>              <em class="comment">// generate a random number between 1 and 3 and duplicate that many number of times.</em>
<a name="57" href="#57">57</a>              <strong>for</strong> (<strong>int</strong> j = 0; j &lt; size; j++)
<a name="58" href="#58">58</a>              {
<a name="59" href="#59">59</a>  
<a name="60" href="#60">60</a>                  <a href="../../../org/displaytag/sample/ListObject.html">ListObject</a> object1 = <strong>new</strong> <a href="../../../org/displaytag/sample/ListObject.html">ListObject</a>();
<a name="61" href="#61">61</a>                  <a href="../../../org/displaytag/sample/ListObject.html">ListObject</a> object2 = <strong>new</strong> <a href="../../../org/displaytag/sample/ListObject.html">ListObject</a>();
<a name="62" href="#62">62</a>                  <a href="../../../org/displaytag/sample/ListObject.html">ListObject</a> object3 = <strong>new</strong> <a href="../../../org/displaytag/sample/ListObject.html">ListObject</a>();
<a name="63" href="#63">63</a>  
<a name="64" href="#64">64</a>                  <strong>int</strong> random = <strong>new</strong> Random().nextInt(3);
<a name="65" href="#65">65</a>                  <strong>for</strong> (<strong>int</strong> k = 0; k &lt;= random; k++)
<a name="66" href="#66">66</a>                  {
<a name="67" href="#67">67</a>                      add(object1);
<a name="68" href="#68">68</a>                  }
<a name="69" href="#69">69</a>  
<a name="70" href="#70">70</a>                  object1.setId(object2.getId());
<a name="71" href="#71">71</a>  
<a name="72" href="#72">72</a>                  random = <strong>new</strong> Random().nextInt(3);
<a name="73" href="#73">73</a>                  <strong>for</strong> (<strong>int</strong> k = 0; k &lt;= random; k++)
<a name="74" href="#74">74</a>                  {
<a name="75" href="#75">75</a>                      add(object1);
<a name="76" href="#76">76</a>                      add(object2);
<a name="77" href="#77">77</a>                  }
<a name="78" href="#78">78</a>  
<a name="79" href="#79">79</a>                  object1.setEmail(object3.getEmail());
<a name="80" href="#80">80</a>  
<a name="81" href="#81">81</a>                  random = <strong>new</strong> java.util.Random().nextInt(3);
<a name="82" href="#82">82</a>                  <strong>for</strong> (<strong>int</strong> k = 0; k &lt;= random; k++)
<a name="83" href="#83">83</a>                  {
<a name="84" href="#84">84</a>                      add(object1);
<a name="85" href="#85">85</a>                  }
<a name="86" href="#86">86</a>              }
<a name="87" href="#87">87</a>          }
<a name="88" href="#88">88</a>          <strong>else</strong>
<a name="89" href="#89">89</a>          {
<a name="90" href="#90">90</a>              <strong>for</strong> (<strong>int</strong> j = 0; j &lt; size; j++)
<a name="91" href="#91">91</a>              {
<a name="92" href="#92">92</a>                  add(<strong>new</strong> <a href="../../../org/displaytag/sample/ListObject.html">ListObject</a>());
<a name="93" href="#93">93</a>              }
<a name="94" href="#94">94</a>          }
<a name="95" href="#95">95</a>      }
<a name="96" href="#96">96</a>  
<a name="97" href="#97">97</a>      <em>/**<em>*</em></em>
<a name="98" href="#98">98</a>  <em>     * Returns a ListObject using get(index) from the Array.</em>
<a name="99" href="#99">99</a>  <em>     * @param index int index of the List object into the array</em>
<a name="100" href="#100">100</a> <em>     * @return ListObject</em>
<a name="101" href="#101">101</a> <em>     */</em>
<a name="102" href="#102">102</a>     <strong>public</strong> <a href="../../../org/displaytag/sample/ListObject.html">ListObject</a> getItem(<strong>int</strong> index)
<a name="103" href="#103">103</a>     {
<a name="104" href="#104">104</a>         <strong>return</strong> (ListObject) <strong>super</strong>.get(index);
<a name="105" href="#105">105</a>     }
<a name="106" href="#106">106</a> 
<a name="107" href="#107">107</a> }
</pre>
<hr/><div id="footer">This page was automatically generated by <a href="http://maven.apache.org/">Maven</a></div></body>
</html>

