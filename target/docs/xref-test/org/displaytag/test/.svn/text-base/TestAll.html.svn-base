<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1" /><title>TestAll xref</title>
<link type="text/css" rel="stylesheet" href="../../../stylesheet.css" />
</head>
<body>
<pre>

<a name="1" href="#1">1</a>   <strong>package</strong> <a href="../../../org/displaytag/test/package-summary.html">org.displaytag.test</a>;
<a name="2" href="#2">2</a>   
<a name="3" href="#3">3</a>   <strong>import</strong> java.io.File;
<a name="4" href="#4">4</a>   <strong>import</strong> java.lang.reflect.Method;
<a name="5" href="#5">5</a>   <strong>import</strong> java.lang.reflect.Modifier;
<a name="6" href="#6">6</a>   <strong>import</strong> java.net.URL;
<a name="7" href="#7">7</a>   <strong>import</strong> java.util.ArrayList;
<a name="8" href="#8">8</a>   <strong>import</strong> java.util.Iterator;
<a name="9" href="#9">9</a>   <strong>import</strong> java.util.List;
<a name="10" href="#10">10</a>  
<a name="11" href="#11">11</a>  <strong>import</strong> junit.framework.Test;
<a name="12" href="#12">12</a>  <strong>import</strong> junit.framework.TestCase;
<a name="13" href="#13">13</a>  <strong>import</strong> junit.framework.TestSuite;
<a name="14" href="#14">14</a>  
<a name="15" href="#15">15</a>  <strong>import</strong> org.apache.commons.logging.Log;
<a name="16" href="#16">16</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;
<a name="17" href="#17">17</a>  
<a name="18" href="#18">18</a>  
<a name="19" href="#19">19</a>  <em>/**<em>*</em></em>
<a name="20" href="#20">20</a>  <em> * Dynamic test suite derived from <a href="http://www.javaworld.com/javaworld/jw-12-2000/jw-1221-junit.html." target="alexandria_uri">http://www.javaworld.com/javaworld/jw-12-2000/jw-1221-junit.html.</a> Runs all Java test</em>
<a name="21" href="#21">21</a>  <em> * cases in the source tree that extend TestCase. This helps running tests faster with ant/maven since httpunit tests</em>
<a name="22" href="#22">22</a>  <em> * requires forking and starting a new java process for each test is too slow.</em>
<a name="23" href="#23">23</a>  <em> * @author Fabrizio Giustina</em>
<a name="24" href="#24">24</a>  <em> * @version $Revision: 1.3 $ ($Author: fgiust $)</em>
<a name="25" href="#25">25</a>  <em> */</em>
<a name="26" href="#26">26</a>  <strong>public</strong> <strong>class</strong> <a href="../../../org/displaytag/test/TestAll.html">TestAll</a> <strong>extends</strong> TestCase
<a name="27" href="#27">27</a>  {
<a name="28" href="#28">28</a>  
<a name="29" href="#29">29</a>      <em>/**<em>*</em></em>
<a name="30" href="#30">30</a>  <em>     * Root package containing tests.</em>
<a name="31" href="#31">31</a>  <em>     */</em>
<a name="32" href="#32">32</a>      <strong>private</strong> <strong>static</strong> <strong>final</strong> String PACKAGE_ROOT = <span class="string">"org.displaytag"</span>;
<a name="33" href="#33">33</a>  
<a name="34" href="#34">34</a>      <em>/**<em>*</em></em>
<a name="35" href="#35">35</a>  <em>     * logger.</em>
<a name="36" href="#36">36</a>  <em>     */</em>
<a name="37" href="#37">37</a>      <strong>private</strong> <strong>static</strong> Log log = LogFactory.getLog(TestAll.<strong>class</strong>);
<a name="38" href="#38">38</a>  
<a name="39" href="#39">39</a>      <em>/**<em>*</em></em>
<a name="40" href="#40">40</a>  <em>     * Basic constructor - called by the test runners.</em>
<a name="41" href="#41">41</a>  <em>     * @param name test name</em>
<a name="42" href="#42">42</a>  <em>     */</em>
<a name="43" href="#43">43</a>      <strong>public</strong> <a href="../../../org/displaytag/test/TestAll.html">TestAll</a>(String name)
<a name="44" href="#44">44</a>      {
<a name="45" href="#45">45</a>          <strong>super</strong>(name);
<a name="46" href="#46">46</a>      }
<a name="47" href="#47">47</a>  
<a name="48" href="#48">48</a>      <em>/**<em>*</em></em>
<a name="49" href="#49">49</a>  <em>     * Iterates over the classes accessible via the iterator and adds them to the test suite.</em>
<a name="50" href="#50">50</a>  <em>     * @param suite TestSuite empty test suite</em>
<a name="51" href="#51">51</a>  <em>     * @param classIterator iterator on loaded classes</em>
<a name="52" href="#52">52</a>  <em>     * @return int number of testcases added to suite</em>
<a name="53" href="#53">53</a>  <em>     */</em>
<a name="54" href="#54">54</a>      <strong>private</strong> <strong>static</strong> <strong>int</strong> addAllTests(TestSuite suite, Iterator classIterator)
<a name="55" href="#55">55</a>      {
<a name="56" href="#56">56</a>          <strong>int</strong> testClassCount = 0;
<a name="57" href="#57">57</a>          <strong>while</strong> (classIterator.hasNext())
<a name="58" href="#58">58</a>          {
<a name="59" href="#59">59</a>              Class testCaseClass = (Class) classIterator.next();
<a name="60" href="#60">60</a>  
<a name="61" href="#61">61</a>              <strong>try</strong>
<a name="62" href="#62">62</a>              {
<a name="63" href="#63">63</a>                  Method suiteMethod = testCaseClass.getMethod(<span class="string">"suite"</span>, <strong>new</strong> Class[0]);
<a name="64" href="#64">64</a>                  Test test = (Test) suiteMethod.invoke(<strong>null</strong>, <strong>new</strong> Class[0]); <em class="comment">// static method</em>
<a name="65" href="#65">65</a>                  suite.addTest(test);
<a name="66" href="#66">66</a>              }
<a name="67" href="#67">67</a>              <strong>catch</strong> (NoSuchMethodException e)
<a name="68" href="#68">68</a>              {
<a name="69" href="#69">69</a>                  suite.addTest(<strong>new</strong> TestSuite(testCaseClass));
<a name="70" href="#70">70</a>              }
<a name="71" href="#71">71</a>              <strong>catch</strong> (Exception e)
<a name="72" href="#72">72</a>              {
<a name="73" href="#73">73</a>                  log.error(<span class="string">"Failed to execute suite ()"</span>, e);
<a name="74" href="#74">74</a>              }
<a name="75" href="#75">75</a>              <strong>if</strong> (log.isDebugEnabled())
<a name="76" href="#76">76</a>              {
<a name="77" href="#77">77</a>                  log.debug(<span class="string">"Loaded test case: "</span> + testCaseClass.getName());
<a name="78" href="#78">78</a>              }
<a name="79" href="#79">79</a>              testClassCount++;
<a name="80" href="#80">80</a>          }
<a name="81" href="#81">81</a>          <strong>return</strong> testClassCount;
<a name="82" href="#82">82</a>      }
<a name="83" href="#83">83</a>  
<a name="84" href="#84">84</a>      <em>/**<em>*</em></em>
<a name="85" href="#85">85</a>  <em>     * Dynamically create a test suite from a set of class files in a directory tree.</em>
<a name="86" href="#86">86</a>  <em>     * @throws Throwable in running the suite() method</em>
<a name="87" href="#87">87</a>  <em>     * @return TestSuite for all the found tests</em>
<a name="88" href="#88">88</a>  <em>     */</em>
<a name="89" href="#89">89</a>      <strong>public</strong> <strong>static</strong> Test suite() throws Throwable
<a name="90" href="#90">90</a>      {
<a name="91" href="#91">91</a>          <strong>try</strong>
<a name="92" href="#92">92</a>          {
<a name="93" href="#93">93</a>              String <strong>class</strong>Name = TestAll.<strong>class</strong>.getName();
<a name="94" href="#94">94</a>              URL testFile = TestAll.<strong>class</strong>.getResource(<span class="string">"TestAll.class"</span>);
<a name="95" href="#95">95</a>              log.debug(testFile.getFile());
<a name="96" href="#96">96</a>              File classRoot = <strong>new</strong> File(testFile.getFile()).getParentFile();
<a name="97" href="#97">97</a>              <strong>while</strong> (className.indexOf(<span class="string">"."</span>) > -1)
<a name="98" href="#98">98</a>              {
<a name="99" href="#99">99</a>                  classRoot = classRoot.getParentFile();
<a name="100" href="#100">100</a>                 className = className.substring(className.indexOf(<span class="string">"."</span>) + 1, className.length());
<a name="101" href="#101">101</a>             }
<a name="102" href="#102">102</a>             log.debug(<span class="string">"Looking for classes in "</span> + classRoot);
<a name="103" href="#103">103</a> 
<a name="104" href="#104">104</a>             ClassFinder classFinder = <strong>new</strong> ClassFinder(classRoot, PACKAGE_ROOT);
<a name="105" href="#105">105</a>             TestCaseLoader testCaseLoader = <strong>new</strong> TestCaseLoader();
<a name="106" href="#106">106</a>             testCaseLoader.loadTestCases(classFinder.getClasses());
<a name="107" href="#107">107</a>             TestSuite suite = <strong>new</strong> TestSuite();
<a name="108" href="#108">108</a>             <strong>int</strong> numberOfTests = addAllTests(suite, testCaseLoader.getClasses());
<a name="109" href="#109">109</a>             <strong>if</strong> (log.isDebugEnabled())
<a name="110" href="#110">110</a>             {
<a name="111" href="#111">111</a>                 log.debug(<span class="string">"Number of test classes found: "</span> + numberOfTests);
<a name="112" href="#112">112</a>             }
<a name="113" href="#113">113</a>             <strong>return</strong> suite;
<a name="114" href="#114">114</a>         }
<a name="115" href="#115">115</a>         <strong>catch</strong> (Throwable t)
<a name="116" href="#116">116</a>         {
<a name="117" href="#117">117</a>             <em class="comment">// This ensures we have extra information.</em>
<a name="118" href="#118">118</a>             <em class="comment">// Otherwise all we get is a "Could not invoke the suite method." message.</em>
<a name="119" href="#119">119</a>             log.error(<span class="string">"suite()"</span>, t);
<a name="120" href="#120">120</a>             <strong>throw</strong> t;
<a name="121" href="#121">121</a>         }
<a name="122" href="#122">122</a>     }
<a name="123" href="#123">123</a> }
<a name="124" href="#124">124</a> 
<a name="125" href="#125">125</a> <em>/**<em>*</em></em>
<a name="126" href="#126">126</a> <em> * This class is responsible for searching a directory for class files. It builds a list of fully qualified class names</em>
<a name="127" href="#127">127</a> <em> * from the class files in the directory tree.</em>
<a name="128" href="#128">128</a> <em> * @author Fabrizio Giustina</em>
<a name="129" href="#129">129</a> <em> * @version $Revision: 1.3 $ ($Author: fgiust $)</em>
<a name="130" href="#130">130</a> <em> */</em>
<a name="131" href="#131">131</a> 
<a name="132" href="#132">132</a> 
<a name="133" href="#133">133</a> <strong>class</strong> ClassFinder
<a name="134" href="#134">134</a> {
<a name="135" href="#135">135</a> 
<a name="136" href="#136">136</a>     <em>/**<em>*</em></em>
<a name="137" href="#137">137</a> <em>     * List of found classes (names).</em>
<a name="138" href="#138">138</a> <em>     */</em>
<a name="139" href="#139">139</a>     <strong>private</strong> List classNameList = <strong>new</strong> ArrayList();
<a name="140" href="#140">140</a> 
<a name="141" href="#141">141</a>     <em>/**<em>*</em></em>
<a name="142" href="#142">142</a> <em>     * length of the base package String.</em>
<a name="143" href="#143">143</a> <em>     */</em>
<a name="144" href="#144">144</a>     <strong>private</strong> <strong>int</strong> startPackageLength;
<a name="145" href="#145">145</a> 
<a name="146" href="#146">146</a>     <em>/**<em>*</em></em>
<a name="147" href="#147">147</a> <em>     * Construct the class finder and locate all the classes in the directory structured pointed to by</em>
<a name="148" href="#148">148</a> <em>     * &lt;code>classPathRoot&lt;/code>. Only classes in the package &lt;code>packageRoot&lt;/code> are considered.</em>
<a name="149" href="#149">149</a> <em>     * @param classPathRoot classpath directory where to search for test cases</em>
<a name="150" href="#150">150</a> <em>     * @param packageRoot root package for tests to be included</em>
<a name="151" href="#151">151</a> <em>     */</em>
<a name="152" href="#152">152</a>     <strong>public</str<a href="../../../ong> ClassFinder(File classPathRoot, String packageRoot)/package-summary.html">ong> ClassFinder(File classPathRoot, String packageRoot)</a>
<a name="153" href="#153">153</a>     {
<a name="154" href="#154">154</a>         startPackageLength = classPathRoot.getAbsolutePath().length() + 1;
<a name="155" href="#155">155</a>         <a href="../../../String directoryOffset = packageRoot/replace('/', File/separatorChar)/package-summary.html">String directoryOffset = packageRoot.replace('.', File.separatorChar)</a>;
<a name="156" href="#156">156</a>         findAndStoreTestClasses(<strong>new</strong> File(classPathRoot, directoryOffset));
<a name="157" href="#157">157</a>     }
<a name="158" href="#158">158</a> 
<a name="159" href="#159">159</a>     <em>/**<em>*</em></em>
<a name="160" href="#160">160</a> <em>     * Given a file name, guess the fully qualified class name.</em>
<a name="161" href="#161">161</a> <em>     * @param file class file</em>
<a name="162" href="#162">162</a> <em>     * @return class name</em>
<a name="163" href="#163">163</a> <em>     */</em>
<a name="164" href="#164">164</a>     <strong>private</strong> String computeClassName(File file)
<a name="165" href="#165">165</a>     {
<a name="166" href="#166">166</a>         String absPath = file.getAbsolutePath();
<a name="167" href="#167">167</a>         <a href="../../../String packageBase = absPath/substring(startPackageLength, absPath/length() - 6)/package-summary.html">String packageBase = absPath.substring(startPackageLength, absPath.length() - 6)</a>;
<a name="168" href="#168">168</a>         String className;
<a name="169" href="#169">169</a>         c<a href="../../../lassName = packageBase/replace(File/separatorChar, '/')/package-summary.html">lassName = packageBase.replace(File.separatorChar, '.')</a>;
<a name="170" href="#170">170</a>         <strong>return</strong> className;
<a name="171" href="#171">171</a>     }
<a name="172" href="#172">172</a> 
<a name="173" href="#173">173</a>     <em>/**<em>*</em></em>
<a name="174" href="#174">174</a> <em>     * This method does all the work. It runs down the directory structure looking for java classes.</em>
<a name="175" href="#175">175</a> <em>     * @param currentDirectory directory to search class files in</em>
<a name="176" href="#176">176</a> <em>     */</em>
<a name="177" href="#177">177</a>     <strong>private</strong> <strong>void</strong> findAndStoreTestClasses(File currentDirectory)
<a name="178" href="#178">178</a>     {
<a name="179" href="#179">179</a>         String[] files = currentDirectory.list();
<a name="180" href="#180">180</a>         <strong>for</strong> (<strong>int</strong> i = 0; i &lt; files.length; i++)
<a name="181" href="#181">181</a>         {
<a name="182" href="#182">182</a>             File file = <strong>new</strong> File(currentDirectory, files[i]);
<a name="183" href="#183">183</a>             String fileBase = file.getName();
<a name="184" href="#184">184</a>             <strong>int</strong> idx = fileBase.indexOf(<span class="string">".class"</span>);
<a name="185" href="#185">185</a>             <strong>final</strong> <strong>int</strong> CLASS_EXTENSION_LENGTH = 6;
<a name="186" href="#186">186</a> 
<a name="187" href="#187">187</a>             <strong>if</strong> (idx != -1 &amp;&amp; (fileBase.length() - idx) == CLASS_EXTENSION_LENGTH)
<a name="188" href="#188">188</a>             {
<a name="189" href="#189">189</a>                 String className = computeClassName(file);
<a name="190" href="#190">190</a>                 classNameList.add(className);
<a name="191" href="#191">191</a>             }
<a name="192" href="#192">192</a>             <strong>else</strong>
<a name="193" href="#193">193</a>             {
<a name="194" href="#194">194</a>                 <strong>if</strong> (file.isDirectory())
<a name="195" href="#195">195</a>                 {
<a name="196" href="#196">196</a>                     findAndStoreTestClasses(file);
<a name="197" href="#197">197</a>                 }
<a name="198" href="#198">198</a>             }
<a name="199" href="#199">199</a>         }
<a name="200" href="#200">200</a>     }
<a name="201" href="#201">201</a> 
<a name="202" href="#202">202</a>     <em>/**<em>*</em></em>
<a name="203" href="#203">203</a> <em>     * Return the found classes.</em>
<a name="204" href="#204">204</a> <em>     * @return Iterator on classes names</em>
<a name="205" href="#205">205</a> <em>     */</em>
<a name="206" href="#206">206</a>     <strong>public</strong> Iterator getClasses()
<a name="207" href="#207">207</a>     {
<a name="208" href="#208">208</a>         <strong>return</strong> classNameList.iterator();
<a name="209" href="#209">209</a>     }
<a name="210" href="#210">210</a> }
<a name="211" href="#211">211</a> 
<a name="212" href="#212">212</a> <em>/**<em>*</em></em>
<a name="213" href="#213">213</a> <em> * Responsible for loading classes representing valid test cases.</em>
<a name="214" href="#214">214</a> <em> * @author Fabrizio Giustina</em>
<a name="215" href="#215">215</a> <em> * @version $Revision: 1.3 $ ($Author: fgiust $)</em>
<a name="216" href="#216">216</a> <em> */</em>
<a name="217" href="#217">217</a> 
<a name="218" href="#218">218</a> 
<a name="219" href="#219">219</a> <strong>class</strong> TestCaseLoader
<a name="220" href="#220">220</a> {
<a name="221" href="#221">221</a> 
<a name="222" href="#222">222</a>     <em>/**<em>*</em></em>
<a name="223" href="#223">223</a> <em>     * list containing laded classes.</em>
<a name="224" href="#224">224</a> <em>     */</em>
<a name="225" href="#225">225</a>     <strong>private</strong> List classList = <strong>new</strong> ArrayList();
<a name="226" href="#226">226</a> 
<a name="227" href="#227">227</a>     <em>/**<em>*</em></em>
<a name="228" href="#228">228</a> <em>     * Load the classes that represent test cases we are interested.</em>
<a name="229" href="#229">229</a> <em>     * @param classNamesIterator An iterator over a collection of fully qualified class names</em>
<a name="230" href="#230">230</a> <em>     */</em>
<a name="231" href="#231">231</a>     <strong>public</strong> <strong>void</strong> loadTestCases(Iterator classNamesIterator)
<a name="232" href="#232">232</a>     {
<a name="233" href="#233">233</a>         <strong>while</strong> (classNamesIterator.hasNext())
<a name="234" href="#234">234</a>         {
<a name="235" href="#235">235</a>             String className = (String) classNamesIterator.next();
<a name="236" href="#236">236</a>             <strong>try</strong>
<a name="237" href="#237">237</a>             {
<a name="238" href="#238">238</a>                 Class candidateClass = Class.forName(className);
<a name="239" href="#239">239</a>                 addClassIfTestCase(candidateClass);
<a name="240" href="#240">240</a>             }
<a name="241" href="#241">241</a>             <strong>catch</strong> (ClassNotFoundException e)
<a name="242" href="#242">242</a>             {
<a name="243" href="#243">243</a>                 System.err.println(<span class="string">"Cannot load class: "</span> + className + <span class="string">" "</span> + e.getMessage());
<a name="244" href="#244">244</a>             }
<a name="245" href="#245">245</a>             <strong>catch</strong> (NoClassDefFoundError e)
<a name="246" href="#246">246</a>             {
<a name="247" href="#247">247</a>                 System.err.println(<span class="string">"Cannot load class that "</span> + className + <span class="string">" is dependant on"</span>);
<a name="248" href="#248">248</a>             }
<a name="249" href="#249">249</a>         }
<a name="250" href="#250">250</a>     }
<a name="251" href="#251">251</a> 
<a name="252" href="#252">252</a>     <em>/**<em>*</em></em>
<a name="253" href="#253">253</a> <em>     * Adds testCaseClass to the list of classes if the class extends TestCase and it's not abstract.</em>
<a name="254" href="#254">254</a> <em>     * @param testCaseClass class to test</em>
<a name="255" href="#255">255</a> <em>     */</em>
<a name="256" href="#256">256</a>     <strong>private</strong> <strong>void</strong> addClassIfTestCase(Class testCaseClass)
<a name="257" href="#257">257</a>     {
<a name="258" href="#258">258</a>         <strong>if</strong> (TestCase.<strong>class</strong>.isAssignableFrom(testCaseClass)
<a name="259" href="#259">259</a>             &amp;&amp; !TestAll.<strong>class</strong>.isAssignableFrom(testCaseClass)
<a name="260" href="#260">260</a>             &amp;&amp; !Modifier.isAbstract(testCaseClass.getModifiers()))
<a name="261" href="#261">261</a>         {
<a name="262" href="#262">262</a>             classList.add(testCaseClass);
<a name="263" href="#263">263</a>         }
<a name="264" href="#264">264</a>     }
<a name="265" href="#265">265</a> 
<a name="266" href="#266">266</a>     <em>/**<em>*</em></em>
<a name="267" href="#267">267</a> <em>     * Obtain an iterator over the collection of test case classes loaded by &lt;code>loadTestCases&lt;/code>.</em>
<a name="268" href="#268">268</a> <em>     * @return Iterator on loaded classes list</em>
<a name="269" href="#269">269</a> <em>     */</em>
<a name="270" href="#270">270</a>     <strong>public</strong> Iterator getClasses()
<a name="271" href="#271">271</a>     {
<a name="272" href="#272">272</a>         <strong>return</strong> classList.iterator();
<a name="273" href="#273">273</a>     }
<a name="274" href="#274">274</a> }
</pre>
<hr/><div id="footer">This page was automatically generated by <a href="http://maven.apache.org/">Maven</a></div></body>
</html>

