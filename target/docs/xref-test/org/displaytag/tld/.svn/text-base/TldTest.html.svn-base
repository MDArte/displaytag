<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1" /><title>TldTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../stylesheet.css" />
</head>
<body>
<pre>

<a name="1" href="#1">1</a>   <strong>package</strong> <a href="../../../org/displaytag/tld/package-summary.html">org.displaytag.tld</a>;
<a name="2" href="#2">2</a>   
<a name="3" href="#3">3</a>   <strong>import</strong> java.io.File;
<a name="4" href="#4">4</a>   <strong>import</strong> java.io.IOException;
<a name="5" href="#5">5</a>   <strong>import</strong> java.net.URL;
<a name="6" href="#6">6</a>   <strong>import</strong> java.util.ArrayList;
<a name="7" href="#7">7</a>   <strong>import</strong> java.util.Iterator;
<a name="8" href="#8">8</a>   <strong>import</strong> java.util.List;
<a name="9" href="#9">9</a>   
<a name="10" href="#10">10</a>  <strong>import</strong> javax.servlet.jsp.tagext.TagSupport;
<a name="11" href="#11">11</a>  <strong>import</strong> javax.xml.parsers.DocumentBuilder;
<a name="12" href="#12">12</a>  <strong>import</strong> javax.xml.parsers.DocumentBuilderFactory;
<a name="13" href="#13">13</a>  
<a name="14" href="#14">14</a>  <strong>import</strong> junit.framework.TestCase;
<a name="15" href="#15">15</a>  
<a name="16" href="#16">16</a>  <strong>import</strong> org.apache.commons.beanutils.PropertyUtils;
<a name="17" href="#17">17</a>  <strong>import</strong> org.apache.commons.lang.builder.ToStringBuilder;
<a name="18" href="#18">18</a>  <strong>import</strong> org.apache.commons.lang.builder.ToStringStyle;
<a name="19" href="#19">19</a>  <strong>import</strong> org.apache.commons.logging.Log;
<a name="20" href="#20">20</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;
<a name="21" href="#21">21</a>  <strong>import</strong> org.w3c.dom.Document;
<a name="22" href="#22">22</a>  <strong>import</strong> org.w3c.dom.Node;
<a name="23" href="#23">23</a>  <strong>import</strong> org.w3c.dom.NodeList;
<a name="24" href="#24">24</a>  <strong>import</strong> org.xml.sax.EntityResolver;
<a name="25" href="#25">25</a>  <strong>import</strong> org.xml.sax.InputSource;
<a name="26" href="#26">26</a>  
<a name="27" href="#27">27</a>  
<a name="28" href="#28">28</a>  <em>/**<em>*</em></em>
<a name="29" href="#29">29</a>  <em> * Reads tlds and check tag classes for declared attributes. This simple reports missing/invalid setters in tag classes.</em>
<a name="30" href="#30">30</a>  <em> * Basic tests only, other tests are performed by the maven-taglib plugin.</em>
<a name="31" href="#31">31</a>  <em> * @author Fabrizio Giustina</em>
<a name="32" href="#32">32</a>  <em> * @version $Revision: 1.6 $ ($Author: fgiust $)</em>
<a name="33" href="#33">33</a>  <em> */</em>
<a name="34" href="#34">34</a>  <strong>public</strong> <strong>class</strong> <a href="../../../org/displaytag/tld/TldTest.html">TldTest</a> <strong>extends</strong> TestCase
<a name="35" href="#35">35</a>  {
<a name="36" href="#36">36</a>  
<a name="37" href="#37">37</a>      <em>/**<em>*</em></em>
<a name="38" href="#38">38</a>  <em>     * logger.</em>
<a name="39" href="#39">39</a>  <em>     */</em>
<a name="40" href="#40">40</a>      <strong>private</strong> <strong>static</strong> Log log = LogFactory.getLog(TldTest.<strong>class</strong>);
<a name="41" href="#41">41</a>  
<a name="42" href="#42">42</a>      <em>/**<em>*</em></em>
<a name="43" href="#43">43</a>  <em>     * @see junit.framework.TestCase#getName()</em>
<a name="44" href="#44">44</a>  <em>     */</em>
<a name="45" href="#45">45</a>      <strong>public</strong> String getName()
<a name="46" href="#46">46</a>      {
<a name="47" href="#47">47</a>          <strong>return</strong> getClass().getName() + <span class="string">"."</span> + <strong>super</strong>.getName();
<a name="48" href="#48">48</a>      }
<a name="49" href="#49">49</a>  
<a name="50" href="#50">50</a>      <em>/**<em>*</em></em>
<a name="51" href="#51">51</a>  <em>     * Check displaytag 1.2 dtd.</em>
<a name="52" href="#52">52</a>  <em>     * @throws Exception any Exception generated during test.</em>
<a name="53" href="#53">53</a>  <em>     */</em>
<a name="54" href="#54">54</a>      <strong>public</strong> <strong>void</strong> test12Tld() throws Exception
<a name="55" href="#55">55</a>      {
<a name="56" href="#56">56</a>          checkTld(<span class="string">"/src/tld/displaytag-12.tld"</span>);
<a name="57" href="#57">57</a>      }
<a name="58" href="#58">58</a>  
<a name="59" href="#59">59</a>      <em>/**<em>*</em></em>
<a name="60" href="#60">60</a>  <em>     * Check displaytag EL dtd.</em>
<a name="61" href="#61">61</a>  <em>     * @throws Exception any Exception generated during test.</em>
<a name="62" href="#62">62</a>  <em>     */</em>
<a name="63" href="#63">63</a>      <strong>public</strong> <strong>void</strong> testELTld() throws Exception
<a name="64" href="#64">64</a>      {
<a name="65" href="#65">65</a>          checkTld(<span class="string">"/src/tld/displaytag-el-12.tld"</span>);
<a name="66" href="#66">66</a>      }
<a name="67" href="#67">67</a>  
<a name="68" href="#68">68</a>      <em>/**<em>*</em></em>
<a name="69" href="#69">69</a>  <em>     * Check the given tld. Assure then:</em>
<a name="70" href="#70">70</a>  <em>     * &lt;ul></em>
<a name="71" href="#71">71</a>  <em>     * &lt;li>Any tag class is loadable&lt;/li></em>
<a name="72" href="#72">72</a>  <em>     * &lt;li>the tag class has a setter for any of the declared attribute&lt;/li></em>
<a name="73" href="#73">73</a>  <em>     * &lt;li>the type declared in the dtd for an attribute (if any) matches the type accepted by the getter&lt;/li></em>
<a name="74" href="#74">74</a>  <em>     * &lt;/ul></em>
<a name="75" href="#75">75</a>  <em>     * @param checkedTld path for the tld to check, relative to basedir.</em>
<a name="76" href="#76">76</a>  <em>     * @throws Exception any Exception generated during test.</em>
<a name="77" href="#77">77</a>  <em>     */</em>
<a name="78" href="#78">78</a>      <strong>public</strong> <strong>void</strong> checkTld(String checkedTld) throws Exception
<a name="79" href="#79">79</a>      {
<a name="80" href="#80">80</a>  
<a name="81" href="#81">81</a>          List tagsAttributes = getTagAttributeList(checkedTld);
<a name="82" href="#82">82</a>  
<a name="83" href="#83">83</a>          List errors = <strong>new</strong> ArrayList();
<a name="84" href="#84">84</a>          Iterator iterator = tagsAttributes.iterator();
<a name="85" href="#85">85</a>          <strong>while</strong> (iterator.hasNext())
<a name="86" href="#86">86</a>          {
<a name="87" href="#87">87</a>              TagAttribute attribute = (TagAttribute) iterator.next();
<a name="88" href="#88">88</a>  
<a name="89" href="#89">89</a>              <strong>if</strong> (log.isDebugEnabled())
<a name="90" href="#90">90</a>              {
<a name="91" href="#91">91</a>                  log.debug(<span class="string">"testing "</span> + attribute);
<a name="92" href="#92">92</a>              }
<a name="93" href="#93">93</a>              String className = attribute.getTagClass();
<a name="94" href="#94">94</a>              Class tagClass = <strong>null</strong>;
<a name="95" href="#95">95</a>              <strong>try</strong>
<a name="96" href="#96">96</a>              {
<a name="97" href="#97">97</a>                  tagClass = Class.forName(className);
<a name="98" href="#98">98</a>              }
<a name="99" href="#99">99</a>              <strong>catch</strong> (ClassNotFoundException e)
<a name="100" href="#100">100</a>             {
<a name="101" href="#101">101</a>                 errors.add(<span class="string">"unable to find declared tag class ["</span> + className + <span class="string">"]"</span>);
<a name="102" href="#102">102</a>                 <strong>continue</strong>;
<a name="103" href="#103">103</a>             }
<a name="104" href="#104">104</a> 
<a name="105" href="#105">105</a>             <strong>if</strong> (!TagSupport.<strong>class</strong>.isAssignableFrom(tagClass))
<a name="106" href="#106">106</a>             {
<a name="107" href="#107">107</a>                 errors.add(<span class="string">"Declared class ["</span> + className + <span class="string">"] doesn't extend TagSupport"</span>);
<a name="108" href="#108">108</a>                 <strong>continue</strong>;
<a name="109" href="#109">109</a>             }
<a name="110" href="#110">110</a> 
<a name="111" href="#111">111</a>             <em class="comment">// load it</em>
<a name="112" href="#112">112</a>             Object tagObject = <strong>null</strong>;
<a name="113" href="#113">113</a>             <strong>try</strong>
<a name="114" href="#114">114</a>             {
<a name="115" href="#115">115</a>                 tagObject = tagClass.newInstance();
<a name="116" href="#116">116</a>             }
<a name="117" href="#117">117</a>             <strong>catch</strong> (Throwable e)
<a name="118" href="#118">118</a>             {
<a name="119" href="#119">119</a>                 errors.add(<span class="string">"unable to instantiate declared tag class ["</span> + className + <span class="string">"]"</span>);
<a name="120" href="#120">120</a>                 <strong>continue</strong>;
<a name="121" href="#121">121</a>             }
<a name="122" href="#122">122</a> 
<a name="123" href="#123">123</a>             <strong>if</strong> (!PropertyUtils.isWriteable(tagObject, attribute.getAttributeName()))
<a name="124" href="#124">124</a>             {
<a name="125" href="#125">125</a>                 errors.add(<span class="string">"Setter for attribute ["</span> + attribute.getAttributeName() + <span class="string">"] not found in "</span> + className);
<a name="126" href="#126">126</a>                 <strong>continue</strong>;
<a name="127" href="#127">127</a>             }
<a name="128" href="#128">128</a> 
<a name="129" href="#129">129</a>             Class propertyType = PropertyUtils.getPropertyType(tagObject, attribute.getAttributeName());
<a name="130" href="#130">130</a> 
<a name="131" href="#131">131</a>             String tldType = attribute.getAttributeType();
<a name="132" href="#132">132</a>             <strong>if</strong> (tldType != <strong>null</strong>)
<a name="133" href="#133">133</a>             {
<a name="134" href="#134">134</a>                 Class tldTypeClass = getClassFromName(tldType);
<a name="135" href="#135">135</a> 
<a name="136" href="#136">136</a>                 <strong>if</strong> (!propertyType.isAssignableFrom(tldTypeClass))
<a name="137" href="#137">137</a>                 {
<a name="138" href="#138">138</a>                     errors.add(<span class="string">"Tag attribute ["</span>
<a name="139" href="#139">139</a>                         + attribute.getAttributeName()
<a name="140" href="#140">140</a>                         + <span class="string">"] declared in tld as ["</span>
<a name="141" href="#141">141</a>                         + tldType
<a name="142" href="#142">142</a>                         + <span class="string">"], class declare ["</span>
<a name="143" href="#143">143</a>                         + propertyType.getName()
<a name="144" href="#144">144</a>                         + <span class="string">"]"</span>);
<a name="145" href="#145">145</a>                     <strong>continue</strong>;
<a name="146" href="#146">146</a>                 }
<a name="147" href="#147">147</a> 
<a name="148" href="#148">148</a>             }
<a name="149" href="#149">149</a> 
<a name="150" href="#150">150</a>         }
<a name="151" href="#151">151</a> 
<a name="152" href="#152">152</a>         <strong>if</strong> (errors.size() > 0)
<a name="153" href="#153">153</a>         {
<a name="154" href="#154">154</a>             <strong>if</strong> (log.isInfoEnabled())
<a name="155" href="#155">155</a>             {
<a name="156" href="#156">156</a>                 log.info(errors.size() + <span class="string">" errors found in tag classes: "</span> + errors);
<a name="157" href="#157">157</a>             }
<a name="158" href="#158">158</a>             fail(errors.size() + <span class="string">" errors found in tag classes: "</span> + errors);
<a name="159" href="#159">159</a>         }
<a name="160" href="#160">160</a>     }
<a name="161" href="#161">161</a> 
<a name="162" href="#162">162</a>     <em>/**<em>*</em></em>
<a name="163" href="#163">163</a> <em>     * returns a class from its name, handling primitives.</em>
<a name="164" href="#164">164</a> <em>     * @param className clss name</em>
<a name="165" href="#165">165</a> <em>     * @return Class istantiated using Class.forName or the matching primitive.</em>
<a name="166" href="#166">166</a> <em>     */</em>
<a name="167" href="#167">167</a>     <strong>private</strong> Class getClassFromName(String className)
<a name="168" href="#168">168</a>     {
<a name="169" href="#169">169</a> 
<a name="170" href="#170">170</a>         Class tldTypeClass = <strong>null</strong>;
<a name="171" href="#171">171</a> 
<a name="172" href="#172">172</a>         <strong>if</strong> (<span class="string">"int"</span>.equals(className))
<a name="173" href="#173">173</a>         {
<a name="174" href="#174">174</a>             tldTypeClass = <strong>int</strong>.<strong>class</strong>;
<a name="175" href="#175">175</a>         }
<a name="176" href="#176">176</a>         <strong>else</strong> <strong>if</strong> (<span class="string">"long"</span>.equals(className))
<a name="177" href="#177">177</a>         {
<a name="178" href="#178">178</a>             tldTypeClass = <strong>long</strong>.<strong>class</strong>;
<a name="179" href="#179">179</a>         }
<a name="180" href="#180">180</a>         <strong>else</strong> <strong>if</strong> (<span class="string">"double"</span>.equals(className))
<a name="181" href="#181">181</a>         {
<a name="182" href="#182">182</a>             tldTypeClass = <strong>double</strong>.<strong>class</strong>;
<a name="183" href="#183">183</a>         }
<a name="184" href="#184">184</a>         <strong>else</strong> <strong>if</strong> (<span class="string">"boolean"</span>.equals(className))
<a name="185" href="#185">185</a>         {
<a name="186" href="#186">186</a>             tldTypeClass = <strong>boolean</strong>.<strong>class</strong>;
<a name="187" href="#187">187</a>         }
<a name="188" href="#188">188</a>         <strong>else</strong> <strong>if</strong> (<span class="string">"char"</span>.equals(className))
<a name="189" href="#189">189</a>         {
<a name="190" href="#190">190</a>             tldTypeClass = <strong>char</strong>.<strong>class</strong>;
<a name="191" href="#191">191</a>         }
<a name="192" href="#192">192</a>         <strong>else</strong> <strong>if</strong> (<span class="string">"byte"</span>.equals(className))
<a name="193" href="#193">193</a>         {
<a name="194" href="#194">194</a>             tldTypeClass = byte.<strong>class</strong>;
<a name="195" href="#195">195</a>         }
<a name="196" href="#196">196</a> 
<a name="197" href="#197">197</a>         <strong>if</strong> (tldTypeClass == <strong>null</strong>)
<a name="198" href="#198">198</a>         {
<a name="199" href="#199">199</a>             <em class="comment">// not a primitive type</em>
<a name="200" href="#200">200</a>             <strong>try</strong>
<a name="201" href="#201">201</a>             {
<a name="202" href="#202">202</a>                 tldTypeClass = Class.forName(className);
<a name="203" href="#203">203</a>             }
<a name="204" href="#204">204</a>             <strong>catch</strong> (ClassNotFoundException e)
<a name="205" href="#205">205</a>             {
<a name="206" href="#206">206</a>                 fail(<span class="string">"unable to find class ["</span> + className + <span class="string">"] declared in 'type' attribute"</span>);
<a name="207" href="#207">207</a>             }
<a name="208" href="#208">208</a>         }
<a name="209" href="#209">209</a>         <strong>return</strong> tldTypeClass;
<a name="210" href="#210">210</a>     }
<a name="211" href="#211">211</a> 
<a name="212" href="#212">212</a>     <em>/**<em>*</em></em>
<a name="213" href="#213">213</a> <em>     * Extract a list of attributes from tld.</em>
<a name="214" href="#214">214</a> <em>     * @param checkedTld path for the checked tld, relative to basedir.</em>
<a name="215" href="#215">215</a> <em>     * @return List of TagAttribute</em>
<a name="216" href="#216">216</a> <em>     * @throws Exception any Exception thrown during test</em>
<a name="217" href="#217">217</a> <em>     */</em>
<a name="218" href="#218">218</a>     <strong>private</strong> List getTagAttributeList(String checkedTld) throws Exception
<a name="219" href="#219">219</a>     {
<a name="220" href="#220">220</a> 
<a name="221" href="#221">221</a>         URL <strong>class</strong>Dir = TldTest.<strong>class</strong>.getResource(<span class="string">"TldTest.class"</span>);
<a name="222" href="#222">222</a>         String tldPath = classDir.getPath();
<a name="223" href="#223">223</a> 
<a name="224" href="#224">224</a>         String baseWebappDir = tldPath.substring(0, tldPath.indexOf(<span class="string">"target"</span>) - 1);
<a name="225" href="#225">225</a>         tldPath = baseWebappDir + checkedTld;
<a name="226" href="#226">226</a>         log.debug(<span class="string">"tld found: "</span> + tldPath);
<a name="227" href="#227">227</a> 
<a name="228" href="#228">228</a>         File tldFile = <strong>new</strong> File(tldPath);
<a name="229" href="#229">229</a>         DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
<a name="230" href="#230">230</a>         builder.setEntityResolver(<strong>new</strong> ClasspathEntityResolver());
<a name="231" href="#231">231</a>         Document webXmlDoc = builder.parse(tldFile);
<a name="232" href="#232">232</a> 
<a name="233" href="#233">233</a>         NodeList tagList = webXmlDoc.getElementsByTagName(<span class="string">"tag"</span>);
<a name="234" href="#234">234</a>         List tagsAttributes = <strong>new</strong> ArrayList();
<a name="235" href="#235">235</a> 
<a name="236" href="#236">236</a>         <strong>for</strong> (<strong>int</strong> i = 0; i &lt; tagList.getLength(); i++)
<a name="237" href="#237">237</a>         {
<a name="238" href="#238">238</a>             Node tag = tagList.item(i);
<a name="239" href="#239">239</a> 
<a name="240" href="#240">240</a>             <em class="comment">// String tagclass = tag.getAttributes().getNamedItem("tag-class").getNodeValue();</em>
<a name="241" href="#241">241</a> 
<a name="242" href="#242">242</a>             NodeList tagAttributes = tag.getChildNodes();
<a name="243" href="#243">243</a> 
<a name="244" href="#244">244</a>             String tagclass = <strong>null</strong>;
<a name="245" href="#245">245</a>             <strong>for</strong> (<strong>int</strong> k = 0; k &lt; tagAttributes.getLength(); k++)
<a name="246" href="#246">246</a>             {
<a name="247" href="#247">247</a>                 Node tagAttribute = tagAttributes.item(k);
<a name="248" href="#248">248</a> 
<a name="249" href="#249">249</a>                 <em class="comment">// only handle 1.0 tlds</em>
<a name="250" href="#250">250</a>                 <strong>if</strong> (<span class="string">"tag-class"</span>.equals(tagAttribute.getNodeName()))
<a name="251" href="#251">251</a>                 {
<a name="252" href="#252">252</a>                     tagclass = tagAttribute.getChildNodes().item(0).getNodeValue();
<a name="253" href="#253">253</a>                     <strong>break</strong>;
<a name="254" href="#254">254</a>                 }
<a name="255" href="#255">255</a> 
<a name="256" href="#256">256</a>             }
<a name="257" href="#257">257</a> 
<a name="258" href="#258">258</a>             tagAttributes = tag.getChildNodes();
<a name="259" href="#259">259</a>             <strong>for</strong> (<strong>int</strong> k = 0; k &lt; tagAttributes.getLength(); k++)
<a name="260" href="#260">260</a>             {
<a name="261" href="#261">261</a>                 Node tagAttribute = tagAttributes.item(k);
<a name="262" href="#262">262</a>                 <strong>if</strong> (<span class="string">"attribute"</span>.equals(tagAttribute.getNodeName()))
<a name="263" href="#263">263</a>                 {
<a name="264" href="#264">264</a>                     NodeList initParams = tagAttribute.getChildNodes();
<a name="265" href="#265">265</a>                     String attributeName = <strong>null</strong>;
<a name="266" href="#266">266</a>                     String attributeType = <strong>null</strong>;
<a name="267" href="#267">267</a>                     <strong>for</strong> (<strong>int</strong> z = 0; z &lt; initParams.getLength(); z++)
<a name="268" href="#268">268</a>                     {
<a name="269" href="#269">269</a>                         Node initParam = initParams.item(z);
<a name="270" href="#270">270</a>                         <strong>if</strong> (initParam.getNodeType() != Node.TEXT_NODE &amp;&amp; initParam.hasChildNodes())
<a name="271" href="#271">271</a>                         {
<a name="272" href="#272">272</a>                             <strong>if</strong> (initParam.getNodeName().equals(<span class="string">"name"</span>))
<a name="273" href="#273">273</a>                             {
<a name="274" href="#274">274</a>                                 attributeName = initParam.getFirstChild().getNodeValue();
<a name="275" href="#275">275</a>                             }
<a name="276" href="#276">276</a>                             <strong>else</strong> <strong>if</strong> (initParam.getNodeName().equals(<span class="string">"type"</span>))
<a name="277" href="#277">277</a>                             {
<a name="278" href="#278">278</a>                                 attributeType = initParam.getFirstChild().getNodeValue();
<a name="279" href="#279">279</a>                             }
<a name="280" href="#280">280</a>                         }
<a name="281" href="#281">281</a>                     }
<a name="282" href="#282">282</a>                     TagAttribute attribute = <strong>new</strong> TagAttribute();
<a name="283" href="#283">283</a>                     attribute.setTagClass(tagclass);
<a name="284" href="#284">284</a>                     attribute.setAttributeName(attributeName);
<a name="285" href="#285">285</a>                     attribute.setAttributeType(attributeType);
<a name="286" href="#286">286</a>                     tagsAttributes.add(attribute);
<a name="287" href="#287">287</a>                     <strong>if</strong> (log.isDebugEnabled())
<a name="288" href="#288">288</a>                     {
<a name="289" href="#289">289</a>                         log.debug(attribute);
<a name="290" href="#290">290</a>                     }
<a name="291" href="#291">291</a>                 }
<a name="292" href="#292">292</a>             }
<a name="293" href="#293">293</a>         }
<a name="294" href="#294">294</a> 
<a name="295" href="#295">295</a>         <strong>return</strong> tagsAttributes;
<a name="296" href="#296">296</a>     }
<a name="297" href="#297">297</a> 
<a name="298" href="#298">298</a>     <em>/**<em>*</em></em>
<a name="299" href="#299">299</a> <em>     * Simple Entity resolver which looks in the classpath for dtds.</em>
<a name="300" href="#300">300</a> <em>     * @author Fabrizio Giustina</em>
<a name="301" href="#301">301</a> <em>     * @version $Revision: 1.6 $ ($Author: fgiust $)</em>
<a name="302" href="#302">302</a> <em>     */</em>
<a name="303" href="#303">303</a>     <strong>public</strong> <strong>static</strong> <strong>class</strong> ClasspathEntityResolver implements EntityResolver
<a name="304" href="#304">304</a>     {
<a name="305" href="#305">305</a> 
<a name="306" href="#306">306</a>         <em>/**<em>*</em></em>
<a name="307" href="#307">307</a> <em>         * @see org.xml.sax.EntityResolver#resolveEntity(java.lang.String, java.lang.String)</em>
<a name="308" href="#308">308</a> <em>         */</em>
<a name="309" href="#309">309</a>         <strong>public</strong> InputSource resolveEntity(String <strong>public</strong>ID, String systemID)
<a name="310" href="#310">310</a>         {
<a name="311" href="#311">311</a>             <strong>if</strong> (systemID != <strong>null</strong>)
<a name="312" href="#312">312</a>             {
<a name="313" href="#313">313</a>                 String systemFileName = systemID;
<a name="314" href="#314">314</a> 
<a name="315" href="#315">315</a>                 <strong>if</strong> (systemFileName.indexOf(<span class="string">"/"</span>) > 0)
<a name="316" href="#316">316</a>                 {
<a name="317" href="#317">317</a>                     systemFileName = systemFileName.substring(systemFileName.lastIndexOf(<span class="string">"/"</span>) + 1, systemFileName
<a name="318" href="#318">318</a>                         .length());
<a name="319" href="#319">319</a>                 }
<a name="320" href="#320">320</a> 
<a name="321" href="#321">321</a>                 ClassLoader classLoader = getClass().getClassLoader();
<a name="322" href="#322">322</a> 
<a name="323" href="#323">323</a>                 URL dtdURL = classLoader.getResource(<span class="string">"javax/servlet/jsp/resources/"</span> + systemFileName);
<a name="324" href="#324">324</a> 
<a name="325" href="#325">325</a>                 <strong>if</strong> (dtdURL == <strong>null</strong>)
<a name="326" href="#326">326</a>                 {
<a name="327" href="#327">327</a>                     <strong>return</strong> <strong>null</strong>;
<a name="328" href="#328">328</a>                 }
<a name="329" href="#329">329</a> 
<a name="330" href="#330">330</a>                 <em class="comment">// Return local copy of the dtd</em>
<a name="331" href="#331">331</a>                 <strong>try</strong>
<a name="332" href="#332">332</a>                 {
<a name="333" href="#333">333</a>                     <strong>return</strong> <strong>new</strong> InputSource(dtdURL.openStream());
<a name="334" href="#334">334</a>                 }
<a name="335" href="#335">335</a>                 <strong>catch</strong> (IOException e)
<a name="336" href="#336">336</a>                 {
<a name="337" href="#337">337</a>                     <em class="comment">// return null</em>
<a name="338" href="#338">338</a>                 }
<a name="339" href="#339">339</a>             }
<a name="340" href="#340">340</a> 
<a name="341" href="#341">341</a>             <em class="comment">// If no match, returning null makes process continue normally</em>
<a name="342" href="#342">342</a>             <strong>return</strong> <strong>null</strong>;
<a name="343" href="#343">343</a>         }
<a name="344" href="#344">344</a>     }
<a name="345" href="#345">345</a> 
<a name="346" href="#346">346</a>     <em>/**<em>*</em></em>
<a name="347" href="#347">347</a> <em>     * Javabean representing a tag attribute.</em>
<a name="348" href="#348">348</a> <em>     * @author Fabrizio Giustina</em>
<a name="349" href="#349">349</a> <em>     * @version $Revision: 1.6 $ ($Author: fgiust $)</em>
<a name="350" href="#350">350</a> <em>     */</em>
<a name="351" href="#351">351</a>     <strong>public</strong> <strong>static</strong> <strong>class</strong> TagAttribute
<a name="352" href="#352">352</a>     {
<a name="353" href="#353">353</a> 
<a name="354" href="#354">354</a>         <em>/**<em>*</em></em>
<a name="355" href="#355">355</a> <em>         * Tag class.</em>
<a name="356" href="#356">356</a> <em>         */</em>
<a name="357" href="#357">357</a>         <strong>private</strong> String tagClass;
<a name="358" href="#358">358</a> 
<a name="359" href="#359">359</a>         <em>/**<em>*</em></em>
<a name="360" href="#360">360</a> <em>         * Attribute name.</em>
<a name="361" href="#361">361</a> <em>         */</em>
<a name="362" href="#362">362</a>         <strong>private</strong> String attributeName;
<a name="363" href="#363">363</a> 
<a name="364" href="#364">364</a>         <em>/**<em>*</em></em>
<a name="365" href="#365">365</a> <em>         * Atttribute type (can be null).</em>
<a name="366" href="#366">366</a> <em>         */</em>
<a name="367" href="#367">367</a>         <strong>private</strong> String attributeType;
<a name="368" href="#368">368</a> 
<a name="369" href="#369">369</a>         <em>/**<em>*</em></em>
<a name="370" href="#370">370</a> <em>         * @return Returns the attribute name.</em>
<a name="371" href="#371">371</a> <em>         */</em>
<a name="372" href="#372">372</a>         <strong>public</strong> String getAttributeName()
<a name="373" href="#373">373</a>         {
<a name="374" href="#374">374</a>             <strong>return</strong> <strong>this</strong>.attributeName;
<a name="375" href="#375">375</a>         }
<a name="376" href="#376">376</a> 
<a name="377" href="#377">377</a>         <em>/**<em>*</em></em>
<a name="378" href="#378">378</a> <em>         * @param name attribute name.</em>
<a name="379" href="#379">379</a> <em>         */</em>
<a name="380" href="#380">380</a>         <strong>public</strong> <strong>void</strong> setAttributeName(String name)
<a name="381" href="#381">381</a>         {
<a name="382" href="#382">382</a>             <strong>this</strong>.attributeName = name;
<a name="383" href="#383">383</a>         }
<a name="384" href="#384">384</a> 
<a name="385" href="#385">385</a>         <em>/**<em>*</em></em>
<a name="386" href="#386">386</a> <em>         * @return Returns the attributeType.</em>
<a name="387" href="#387">387</a> <em>         */</em>
<a name="388" href="#388">388</a>         <strong>public</strong> String getAttributeType()
<a name="389" href="#389">389</a>         {
<a name="390" href="#390">390</a>             <strong>return</strong> <strong>this</strong>.attributeType;
<a name="391" href="#391">391</a>         }
<a name="392" href="#392">392</a> 
<a name="393" href="#393">393</a>         <em>/**<em>*</em></em>
<a name="394" href="#394">394</a> <em>         * @param type The attributeType to set.</em>
<a name="395" href="#395">395</a> <em>         */</em>
<a name="396" href="#396">396</a>         <strong>public</strong> <strong>void</strong> setAttributeType(String type)
<a name="397" href="#397">397</a>         {
<a name="398" href="#398">398</a>             <strong>this</strong>.attributeType = type;
<a name="399" href="#399">399</a>         }
<a name="400" href="#400">400</a> 
<a name="401" href="#401">401</a>         <em>/**<em>*</em></em>
<a name="402" href="#402">402</a> <em>         * @return Returns the tagClass.</em>
<a name="403" href="#403">403</a> <em>         */</em>
<a name="404" href="#404">404</a>         <strong>public</strong> String getTagClass()
<a name="405" href="#405">405</a>         {
<a name="406" href="#406">406</a>             <strong>return</strong> <strong>this</strong>.tagClass;
<a name="407" href="#407">407</a>         }
<a name="408" href="#408">408</a> 
<a name="409" href="#409">409</a>         <em>/**<em>*</em></em>
<a name="410" href="#410">410</a> <em>         * @param tagClassName name of the tag class</em>
<a name="411" href="#411">411</a> <em>         */</em>
<a name="412" href="#412">412</a>         <strong>public</strong> <strong>void</strong> setTagClass(String tagClassName)
<a name="413" href="#413">413</a>         {
<a name="414" href="#414">414</a>             <strong>this</strong>.tagClass = tagClassName;
<a name="415" href="#415">415</a>         }
<a name="416" href="#416">416</a> 
<a name="417" href="#417">417</a>         <em>/**<em>*</em></em>
<a name="418" href="#418">418</a> <em>         * @see java.lang.Object#toString()</em>
<a name="419" href="#419">419</a> <em>         */</em>
<a name="420" href="#420">420</a>         <strong>public</strong> String toString()
<a name="421" href="#421">421</a>         {
<a name="422" href="#422">422</a>             <strong>return</strong> <strong>new</strong> ToStringBuilder(<strong>this</strong>, ToStringStyle.SIMPLE_STYLE).append(<span class="string">"tagClass"</span>, <strong>this</strong>.tagClass).append(
<a name="423" href="#423">423</a>                 <span class="string">"attributeName"</span>,
<a name="424" href="#424">424</a>                 <strong>this</strong>.attributeName).append(<span class="string">"attributeType"</span>, <strong>this</strong>.attributeType).toString();
<a name="425" href="#425">425</a>         }
<a name="426" href="#426">426</a>     }
<a name="427" href="#427">427</a> }
</pre>
<hr/><div id="footer">This page was automatically generated by <a href="http://maven.apache.org/">Maven</a></div></body>
</html>

